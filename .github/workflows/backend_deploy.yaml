name: ECR Prod Backend Deploy

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"

env:
  IMAGE: dangdang-api
  REPO: 180993267331.dkr.ecr.ap-northeast-2.amazonaws.com
  TAG: ${GITHUB_SHA::7}
  EC2_SSH_USER: ubuntu

jobs:
  build:
    name: ECR Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Node.js
        uses: actions/setup-node@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: backend/node_modules
          key: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('backend/package-lock.json') }}
      - name: Install Dependencies
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        run: npm ci
      - name: Run build
        run: npm run build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker build
        run: |
          docker build --platform linux/amd64 -t ${{ env.IMAGE }} --target prod .
      - name: ECR push
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ env.REPO }}
          docker tag ${{ env.IMAGE }} ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.TAG }}
          docker push ${{ env.REPO }}/${{ env.IMAGE}}:${{ env.TAG }}
  deploy:
    name: ECR Deploy
    needs: build
    runs-on: [ self-hosted, label-api ]
    steps:
      - name: Deploy to Amazon EC2
        run : |
          docker ps -q --filter "name=${{ env.IMAGE }}" | grep -q . && docker stop ${{ env.IMAGE }} && docker rm -fv ${{ env.IMAGE }}
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ env.REPO }}
          docker pull ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.TAG }}
          docker run -d --name ${{ env.IMAGE }} --restart always -p 3031:3031 --env-file .env.prod ${{ env.REPO }}/${{ env.IMAGE }}:${{ env.TAG }} 
          docker image prune -af
