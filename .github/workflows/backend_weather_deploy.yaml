name: Backend Weather Deploy

on:
  push:
    branches: [main]
    paths:
      - "backend/weather/**"

env:
  IMAGE: dangdangwalk/weather

jobs:
  build:
    name: Docker Hub Build and Push
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend/
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Setup Node.js
        uses: actions/setup-node@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: backend/weather/node_modules
          key: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('backend/weather/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('backend/weather/package-lock.json') }}
      - name: Install Dependencies
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        working-directory: ./backend/weather
        run: npm ci --ignore-scripts
      - name: Run build
        working-directory: ./backend/weather
        run: npm run build
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Set short SHA
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
      - name: Docker build
        run: |
          docker build --platform linux/amd64 -t ${{ env.IMAGE }} --target prod -f weather/Dockerfile .
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/weather/Dockerfile
          push: true
          tags: ${{ env.IMAGE }}:${{ env.SHORT_SHA }}
  deploy:
    name: Oracle Instance Deploy
    needs: build
    runs-on: [self-hosted, label-weather]
    steps:
      - name: Set short SHA
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
      - name: Create .env
        env:
          ENV_FILE: ${{ secrets.ENV_FILE_BACKEND_WEATHER }}
        run: |
          if [ ! -d "backend/weather" ]; then 
            mkdir -p backend/weather;  
          fi
          echo "$ENV_FILE" > ./backend/weather/.env.prod
      - name: Setup Redis
        run: |
          REDIS_PORT=$(grep REDIS_PORT ./backend/weather/.env.prod | cut -d '=' -f2)
          REDIS_PORT=${REDIS_PORT:-6379}

          IS_REDIS_RUNNING=$(docker inspect -f'{{.State.Status}}'  redis-container 2>/dev/null | grep running)

          if [ -z "$IS_REDIS_RUNNING" ]; then
          docker rm -f redis-container 2>/dev/null
          docker volume create redis_data
          docker run -d --name redis-container \
            -v redis_data:/data \
            -p ${REDIS_PORT}:6379 \
            redis:7.0.15 \
            redis-server --appendonly yes --dir /data
            echo "Redis 컨테이너가 생성되었습니다."
          else
            echo "Redis 컨테이너가 이미 실행중입니다."
          fi
      - name: run module
        run: |
          chmod +x /home/opc/run-weather.sh
          /home/opc/run-weather.sh ${{ env.SHORT_SHA }} .env.prod ${{ env.IMAGE }}
