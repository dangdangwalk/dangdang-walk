{"version":3,"sources":["../../src/s3/s3.service.ts"],"sourcesContent":["import { DeleteObjectCommand, DeleteObjectsCommand, PutObjectCommand, S3Client } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { ForbiddenException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\n\nimport { FileType } from './pipes/file-type-validation.pipe';\nimport { PresignedUrlInfo } from './types/presigned-url-info.type';\n\nimport { WinstonLoggerService } from '../common/logger/winstonLogger.service';\nimport { generateUuid } from '../utils/hash.util';\n\nconst BUCKET_NAME = 'dangdangbucket';\n\n@Injectable()\nexport class S3Service {\n    private readonly s3Client;\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly logger: WinstonLoggerService,\n    ) {\n        this.s3Client = new S3Client({ region: this.configService.getOrThrow('AWS_S3_REGION') });\n    }\n\n    private makeFileName(userId: number, type: FileType[]): string[] {\n        return type.map((curType) => `${userId}/${generateUuid()}.${curType}`);\n    }\n\n    async createPresignedUrlWithClientForPut(userId: number, type: FileType[]): Promise<PresignedUrlInfo[]> {\n        const filenameArray = this.makeFileName(userId, type);\n        const presignedUrlInfoPromises = filenameArray.map(async (curFileName) => {\n            const command = new PutObjectCommand({\n                Bucket: BUCKET_NAME,\n                ContentType: `image/${type}`,\n                Key: curFileName,\n            });\n            const url = await getSignedUrl(this.s3Client, command, { expiresIn: 3600 });\n            return { filename: curFileName, url };\n        });\n        return Promise.all(presignedUrlInfoPromises);\n    }\n\n    private checkUserIdInFilename(userId: number, filename: string): boolean {\n        const filenameSplit = filename.split('/');\n        if (parseInt(filenameSplit[0]) !== userId) {\n            return false;\n        }\n        return true;\n    }\n\n    async deleteObjects(userId: number, filenames: string[]) {\n        const objectArray: {\n            Key: string;\n        }[] = [];\n\n        for (const curFilename of filenames) {\n            if (curFilename.startsWith('default/')) continue;\n\n            if (!this.checkUserIdInFilename(userId, curFilename)) {\n                throw new ForbiddenException(`유저 ${userId}은 이미지 ${curFilename}에 대한 접근 권한이 없습니다`);\n            }\n\n            objectArray.push({ Key: curFilename });\n        }\n\n        const input = {\n            Bucket: BUCKET_NAME,\n            Delete: {\n                Objects: objectArray,\n            },\n        };\n\n        const command = new DeleteObjectsCommand(input);\n        try {\n            await this.s3Client.send(command);\n            this.logger.log(`${BUCKET_NAME} 버킷에서 ${filenames} 파일을 성공적으로 삭제했습니다`);\n        } catch (error) {\n            this.logger.error(`${BUCKET_NAME} 버킷에서 ${filenames} 파일 삭제에 실패했습니다`, error ?? error.stack);\n        }\n    }\n\n    async deleteSingleObject(userId: number, filename: string) {\n        if (filename.startsWith('default/')) return;\n\n        if (!this.checkUserIdInFilename(userId, filename)) {\n            throw new ForbiddenException(`유저 ${userId}은/는 ${filename}에 대한 접근 권한이 없습니다`);\n        }\n\n        const command = new DeleteObjectCommand({\n            Bucket: BUCKET_NAME,\n            Key: filename,\n        });\n\n        try {\n            await this.s3Client.send(command);\n            this.logger.log(`${BUCKET_NAME} 버킷에서 ${filename} 파일을 성공적으로 삭제했습니다`);\n        } catch (error) {\n            this.logger.error(`${BUCKET_NAME} 버킷에서 ${filename} 파일 삭제에 실패했습니다`, error ?? error.stack);\n        }\n    }\n\n    async deleteObjectFolder(userId: number) {\n        const filename = `${userId.toString()}/`;\n\n        const command = new DeleteObjectCommand({\n            Bucket: BUCKET_NAME,\n            Key: filename,\n        });\n\n        try {\n            await this.s3Client.send(command);\n            this.logger.log(`${BUCKET_NAME} 버킷에서 ${filename} 파일을 성공적으로 삭제했습니다`);\n        } catch (error) {\n            this.logger.error(`${BUCKET_NAME} 버킷에서 ${filename} 파일 삭제에 실패했습니다`, error ?? error.stack);\n        }\n    }\n}\n"],"names":["S3Service","BUCKET_NAME","makeFileName","userId","type","map","curType","generateUuid","createPresignedUrlWithClientForPut","filenameArray","presignedUrlInfoPromises","curFileName","command","PutObjectCommand","Bucket","ContentType","Key","url","getSignedUrl","s3Client","expiresIn","filename","Promise","all","checkUserIdInFilename","filenameSplit","split","parseInt","deleteObjects","filenames","objectArray","curFilename","startsWith","ForbiddenException","push","input","Delete","Objects","DeleteObjectsCommand","send","logger","log","error","stack","deleteSingleObject","DeleteObjectCommand","deleteObjectFolder","toString","constructor","configService","S3Client","region","getOrThrow","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}