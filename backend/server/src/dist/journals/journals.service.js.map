{"version":3,"sources":["../../src/journals/journals.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { Excrements } from 'src/excrements/excrements.entity';\nimport { DogWalkingTotalResponse } from 'src/statistics/types/statistic.type';\nimport { DeleteResult, EntityManager, FindOptionsWhere, In, InsertResult } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional';\n\nimport { Journals } from './journals.entity';\nimport { JournalsRepository } from './journals.repository';\nimport {\n    ExcrementsInputForCreate,\n    CreateJournalRequest,\n    DogOutputForDetail,\n    DogWalkJournalRaw,\n    ExcrementCount,\n    JournalDetailResponse,\n    JournalDetailRaw,\n    JournalOutputForDetail,\n    JournalListResponse,\n    UpdateJournalRequest,\n    UpdateTodayWalkTimeOperation,\n    UpdateJournalDatabaseInput,\n    CreateJournalDatabaseInput,\n    JournalInputForCreate,\n} from './types/journal.types';\n\nimport { DogWalkDayService } from '../dog-walk-day/dog-walk-day.service';\nimport { DogsService } from '../dogs/dogs.service';\nimport { ExcrementsService } from '../excrements/excrements.service';\nimport { EXCREMENT, Excrement } from '../excrements/types/excrement.type';\nimport { JournalsDogs } from '../journals-dogs/journals-dogs.entity';\nimport { JournalsDogsService } from '../journals-dogs/journals-dogs.service';\nimport { S3Service } from '../s3/s3.service';\nimport { TodayWalkTimeService } from '../today-walk-time/today-walk-time.service';\nimport { formatDate, getStartAndEndOfDay } from '../utils/date.util';\nimport { checkIfExistsInArr, makeSubObject, makeSubObjectsArray } from '../utils/manipulate.util';\n\n@Injectable()\nexport class JournalsService {\n    constructor(\n        private readonly journalsRepository: JournalsRepository,\n        private readonly journalsDogsService: JournalsDogsService,\n        private readonly dogsService: DogsService,\n        private readonly excrementsService: ExcrementsService,\n        private readonly dogWalkDayService: DogWalkDayService,\n        private readonly todayWalkTimeService: TodayWalkTimeService,\n        private readonly entityManager: EntityManager,\n        private readonly s3Service: S3Service,\n    ) {}\n\n    private async create(entityData: Partial<Journals>): Promise<Journals> {\n        const journals = new Journals(entityData);\n        return await this.journalsRepository.create(journals);\n    }\n\n    private async delete(journalId: number): Promise<DeleteResult> {\n        const where: FindOptionsWhere<Journals> = { id: journalId };\n        return await this.journalsRepository.delete(where);\n    }\n\n    private async update(journalId: number, updateData: Partial<Journals>) {\n        this.journalsRepository.update({ id: journalId }, updateData);\n    }\n\n    private async getOwnJournalIds(userId: number): Promise<number[]> {\n        const ownJournals = await this.journalsRepository.find({ where: { userId }, select: ['id'] });\n\n        return ownJournals.map((cur) => cur.id);\n    }\n\n    async checkJournalOwnership(userId: number, journalIds: number | number[]): Promise<[boolean, number[]]> {\n        const myJournalIds = await this.getOwnJournalIds(userId);\n        return checkIfExistsInArr(myJournalIds, journalIds);\n    }\n\n    private makeJournalInfoForDetail(journalId: number, journalInfoRaw: JournalDetailRaw): JournalOutputForDetail {\n        const journalInfo: JournalOutputForDetail = makeSubObject(\n            journalInfoRaw,\n            JournalOutputForDetail.getFieldForJournalTable(),\n        );\n\n        journalInfo.id = journalId;\n        journalInfo.routes = JSON.parse(journalInfoRaw.routes);\n        journalInfo.journalPhotos = JSON.parse(journalInfoRaw.journalPhotos);\n        journalInfo.excrementCount = JSON.parse(journalInfoRaw.excrementCount);\n\n        return journalInfo;\n    }\n\n    async getDogsInfoForDetail(dogIds: number[]): Promise<DogOutputForDetail[]> {\n        const dogInfoRaw = await this.dogsService.find({\n            where: { id: In(dogIds) },\n            select: DogOutputForDetail.getFieldForDogTable(),\n        });\n        return makeSubObjectsArray(dogInfoRaw, DogOutputForDetail.getFieldForDogTable());\n    }\n\n    async getJournalDetail(journalId: number): Promise<JournalDetailResponse> {\n        const journalDogIds: number[] = await this.journalsDogsService.getDogIdsByJournalId(journalId);\n\n        const [journalInfoRaw, dogInfo]: [JournalDetailRaw, DogOutputForDetail[]] = await Promise.all([\n            await this.journalsRepository.findOne({\n                where: { id: journalId },\n                select: [...JournalOutputForDetail.getFieldForJournalTable()],\n            }),\n            this.getDogsInfoForDetail(journalDogIds),\n        ]);\n        const journalInfo: JournalOutputForDetail = this.makeJournalInfoForDetail(journalId, journalInfoRaw);\n\n        return new JournalDetailResponse(journalInfo, dogInfo);\n    }\n\n    private makeJournalData(\n        userId: number,\n        journalInputForCreate: JournalInputForCreate,\n        excrementsInputForCreate: ExcrementsInputForCreate[],\n    ): CreateJournalDatabaseInput {\n        const journalData: CreateJournalDatabaseInput = {\n            ...makeSubObject(journalInputForCreate, CreateJournalDatabaseInput.getKeysForJournalRequest()),\n            userId,\n        };\n        const excrementsCntArr: ExcrementCount[] = excrementsInputForCreate.map((cur) => ({\n            dogId: cur.dogId,\n            fecesCnt: cur.fecesLocations.length,\n            urineCnt: cur.urineLocations.length,\n        }));\n        journalData.memo = journalInputForCreate.memo ? journalInputForCreate.memo : '';\n        journalData.excrementCount = JSON.stringify(excrementsCntArr);\n        journalData.journalPhotos = JSON.stringify(\n            journalInputForCreate.journalPhotos ? journalInputForCreate.journalPhotos : [],\n        );\n        journalData.routes = JSON.stringify(journalInputForCreate.routes);\n        return journalData;\n    }\n\n    private async updateDogWalkDay(dogIds: number[], operation: (current: number) => number) {\n        const dogWalkDayIds = await this.dogsService.getRelatedTableIdList(dogIds, 'walkDayId');\n\n        await this.dogWalkDayService.updateDailyWalkCount(dogWalkDayIds, operation);\n    }\n\n    private async updateTodayWalkTime(dogIds: number[], duration: number, operation: UpdateTodayWalkTimeOperation) {\n        const todayWalkTimeIds = await this.dogsService.getRelatedTableIdList(dogIds, 'todayWalkTimeId');\n        await this.todayWalkTimeService.updateDurations(todayWalkTimeIds, duration, operation);\n    }\n\n    async createExcrements(journalId: number, excrements: ExcrementsInputForCreate[]): Promise<InsertResult> {\n        const excrementsEntity: Partial<Excrements>[] = [];\n\n        for (const curExcrements of excrements) {\n            const { dogId, fecesLocations, urineLocations } = curExcrements;\n\n            const createExcrementEntity = (\n                journalId: number,\n                dogId: number,\n                type: Excrement,\n                coordinate: [number, number],\n            ) => ({\n                journalId,\n                dogId,\n                type,\n                coordinate: this.excrementsService.makeCoordinate(coordinate[0], coordinate[1]),\n            });\n\n            excrementsEntity.push(\n                ...fecesLocations.map((coordinate) =>\n                    createExcrementEntity(journalId, dogId, EXCREMENT.Feces, coordinate),\n                ),\n                ...urineLocations.map((coordinate) =>\n                    createExcrementEntity(journalId, dogId, EXCREMENT.Urine, coordinate),\n                ),\n            );\n        }\n\n        return await this.excrementsService.insert(excrementsEntity);\n    }\n\n    @Transactional()\n    async createJournal(userId: number, createJournalRequest: CreateJournalRequest): Promise<void> {\n        const dogIds = createJournalRequest.dogs;\n        const journalDatabaseInput: CreateJournalDatabaseInput = this.makeJournalData(\n            userId,\n            createJournalRequest.journalInfo,\n            createJournalRequest.excrements,\n        );\n        const createJournalResult = await this.create(journalDatabaseInput);\n\n        await this.journalsDogsService.createJournalDogs(createJournalResult.id, dogIds);\n\n        const addDogWalkDay = (current: number) => (current += 1);\n        const addTodayWalkTime = (current: number, value: number) => current + value;\n        await this.updateDogWalkDay(dogIds, addDogWalkDay);\n        await this.updateTodayWalkTime(dogIds, createJournalRequest.journalInfo.duration, addTodayWalkTime);\n\n        if (createJournalRequest.excrements && createJournalRequest.excrements.length) {\n            await this.createExcrements(createJournalResult.id, createJournalRequest.excrements);\n        }\n    }\n\n    @Transactional()\n    async updateJournal(journalId: number, updateJournalRequest: UpdateJournalRequest): Promise<void> {\n        const updateJournalDatabaseInput: UpdateJournalDatabaseInput = {\n            memo: updateJournalRequest.memo ? updateJournalRequest.memo : '',\n            journalPhotos: updateJournalRequest.journalPhotos\n                ? JSON.stringify(updateJournalRequest.journalPhotos)\n                : '[]',\n        };\n\n        await this.update(journalId, updateJournalDatabaseInput);\n    }\n\n    @Transactional()\n    async deleteJournal(userId: number, journalId: number) {\n        const dogIds: number[] = await this.journalsDogsService.getDogIdsByJournalId(journalId);\n        const journalRaw = await this.journalsRepository.findOne({ where: { id: journalId } });\n        const journalPhotos: string[] = JSON.parse(journalRaw.journalPhotos);\n\n        const subtractTodayWalkTime = (current: number, value: number) => current - value;\n        const subtractDogWalkDay = (current: number) => (current -= 1);\n        await this.updateDogWalkDay(dogIds, subtractDogWalkDay);\n        await this.updateTodayWalkTime(dogIds, journalRaw.duration, subtractTodayWalkTime);\n\n        await this.s3Service.deleteObjects(userId, journalPhotos);\n        await this.delete(journalId);\n    }\n\n    private async findUserDogJournalsByDate(\n        userId: number,\n        dogId: number,\n        startDate: Date,\n        endDate: Date,\n    ): Promise<DogWalkJournalRaw[]> {\n        return await this.entityManager.query(\n            `\n        SELECT STRAIGHT_JOIN journals.distance, journals.duration, journals.started_at as startedAt \n        FROM journals \n        INNER JOIN journals_dogs ON journals.id = journals_dogs.journal_id\n        WHERE journals.user_id = ?\n          AND journals_dogs.dog_id = ?\n          AND journals.started_at >= ?\n          AND journals.started_at < ?\n      `,\n            [userId, dogId, startDate, endDate],\n        );\n    }\n\n    private getTotal(journals: DogWalkJournalRaw[]): DogWalkingTotalResponse {\n        const totals = journals.reduce(\n            (acc, journal) => {\n                acc.totalWalkCnt += 1;\n                acc.totalDistance += journal.distance;\n                acc.totalTime += journal.duration;\n                return acc;\n            },\n            { totalWalkCnt: 0, totalDistance: 0, totalTime: 0 },\n        );\n        return totals;\n    }\n\n    async findJournalsAndGetTotal(\n        userId: number,\n        dogId: number,\n        startDate: Date,\n        endDate: Date,\n    ): Promise<DogWalkingTotalResponse> {\n        const dogJournals = await this.findUserDogJournalsByDate(userId, dogId, startDate, endDate);\n        return this.getTotal(dogJournals);\n    }\n\n    private aggregateJournalsByDate(\n        journals: DogWalkJournalRaw[],\n        startDate: Date,\n        endDate: Date,\n    ): { [date: string]: number } {\n        const journalCntAMonth: { [date: string]: number } = {};\n\n        const currentDate = new Date(startDate);\n        while (currentDate <= endDate) {\n            const dateString = formatDate(currentDate);\n            journalCntAMonth[dateString] = 0;\n            currentDate.setDate(currentDate.getDate() + 1);\n        }\n\n        journals.forEach((journal) => {\n            const journalDate = new Date(journal.startedAt);\n            const dateString = formatDate(journalDate);\n            journalCntAMonth[dateString]++;\n        });\n\n        return journalCntAMonth;\n    }\n\n    async findJournalsAndAggregateByDay(\n        userId: number,\n        dogId: number,\n        startDate: Date,\n        endDate: Date,\n    ): Promise<{ [date: string]: number }> {\n        const dogJournals = await this.findUserDogJournalsByDate(userId, dogId, startDate, endDate);\n        return Promise.resolve(this.aggregateJournalsByDate(dogJournals, startDate, endDate));\n    }\n\n    private async getJournalIdsByDogIdAndDate(userId: number, dogId: number, date: string): Promise<number[]> {\n        const startEndDate = getStartAndEndOfDay(new Date(date));\n\n        const result = await this.entityManager\n            .createQueryBuilder(Journals, 'journals')\n            .select([\n                'journals.id AS \"journalId\"',\n                'journals.started_at AS \"startedAt\"',\n                'distance',\n                'calories',\n                'duration',\n            ])\n            .innerJoin(JournalsDogs, 'journals_dogs', 'journals.id = journals_dogs.journal_id')\n            .where('journals_dogs.dog_id = :dogId', { dogId })\n            .andWhere('journals.user_id = :userId', { userId })\n            .andWhere('journals.started_at >= :startDate', { startDate: startEndDate.startDate })\n            .andWhere('journals.started_at < :endDate', { endDate: startEndDate.endDate })\n            .orderBy('journals.id', 'ASC')\n            .getRawMany();\n\n        if (!result.length) {\n            return [];\n        }\n        const firstJournalId = result[0].journalId;\n\n        let initCount = await this.entityManager\n            .createQueryBuilder(JournalsDogs, 'journals_dogs')\n            .where('journals_dogs.dog_id = :dogId', { dogId })\n            .andWhere('journals_dogs.journal_id <= :firstJournalId', { firstJournalId })\n            .getCount();\n\n        return result.map((cur) => ({\n            ...cur,\n            journalCnt: initCount++,\n        }));\n    }\n\n    async getJournalList(userId: number, dogId: number, date: string): Promise<JournalListResponse[]> {\n        const journalListRaw = await this.getJournalIdsByDogIdAndDate(userId, dogId, date);\n        if (!journalListRaw.length) {\n            return [];\n        }\n\n        const journalListResponse: JournalListResponse[] = makeSubObjectsArray(\n            journalListRaw,\n            JournalListResponse.getKeysForJournalListRaw(),\n        );\n\n        return journalListResponse;\n    }\n}\n"],"names":["JournalsService","create","entityData","journals","Journals","journalsRepository","delete","journalId","where","id","update","updateData","getOwnJournalIds","userId","ownJournals","find","select","map","cur","checkJournalOwnership","journalIds","myJournalIds","checkIfExistsInArr","makeJournalInfoForDetail","journalInfoRaw","journalInfo","makeSubObject","JournalOutputForDetail","getFieldForJournalTable","routes","JSON","parse","journalPhotos","excrementCount","getDogsInfoForDetail","dogIds","dogInfoRaw","dogsService","In","DogOutputForDetail","getFieldForDogTable","makeSubObjectsArray","getJournalDetail","journalDogIds","journalsDogsService","getDogIdsByJournalId","dogInfo","Promise","all","findOne","JournalDetailResponse","makeJournalData","journalInputForCreate","excrementsInputForCreate","journalData","CreateJournalDatabaseInput","getKeysForJournalRequest","excrementsCntArr","dogId","fecesCnt","fecesLocations","length","urineCnt","urineLocations","memo","stringify","updateDogWalkDay","operation","dogWalkDayIds","getRelatedTableIdList","dogWalkDayService","updateDailyWalkCount","updateTodayWalkTime","duration","todayWalkTimeIds","todayWalkTimeService","updateDurations","createExcrements","excrements","excrementsEntity","curExcrements","createExcrementEntity","type","coordinate","excrementsService","makeCoordinate","push","EXCREMENT","Feces","Urine","insert","createJournal","createJournalRequest","dogs","journalDatabaseInput","createJournalResult","createJournalDogs","addDogWalkDay","current","addTodayWalkTime","value","updateJournal","updateJournalRequest","updateJournalDatabaseInput","deleteJournal","journalRaw","subtractTodayWalkTime","subtractDogWalkDay","s3Service","deleteObjects","findUserDogJournalsByDate","startDate","endDate","entityManager","query","getTotal","totals","reduce","acc","journal","totalWalkCnt","totalDistance","distance","totalTime","findJournalsAndGetTotal","dogJournals","aggregateJournalsByDate","journalCntAMonth","currentDate","Date","dateString","formatDate","setDate","getDate","forEach","journalDate","startedAt","findJournalsAndAggregateByDay","resolve","getJournalIdsByDogIdAndDate","date","startEndDate","getStartAndEndOfDay","result","createQueryBuilder","innerJoin","JournalsDogs","andWhere","orderBy","getRawMany","firstJournalId","initCount","getCount","journalCnt","getJournalList","journalListRaw","journalListResponse","JournalListResponse","getKeysForJournalListRaw","constructor","Transactional","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}