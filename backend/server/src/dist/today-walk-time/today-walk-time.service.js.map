{"version":3,"sources":["../../src/today-walk-time/today-walk-time.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { UpdateTodayWalkTimeOperation } from 'src/journals/types/journal.types';\nimport { EntityManager, FindOptionsWhere, In } from 'typeorm';\n\nimport { TodayWalkTime } from './today-walk-time.entity';\n\nimport { TodayWalkTimeRepository } from './today-walk-time.repository';\n\nimport { WinstonLoggerService } from '../common/logger/winstonLogger.service';\nimport { getStartOfToday } from '../utils/date.util';\n\n@Injectable()\nexport class TodayWalkTimeService {\n    constructor(\n        private readonly todayWalkTimeRepository: TodayWalkTimeRepository,\n        private readonly logger: WinstonLoggerService,\n        private readonly entityManager: EntityManager,\n    ) {}\n\n    async delete(where: FindOptionsWhere<TodayWalkTime>) {\n        return await this.todayWalkTimeRepository.delete(where);\n    }\n\n    async updateIfStaleAndGetDuration(todayWalkTime: TodayWalkTime): Promise<number> {\n        const startOfToday = getStartOfToday();\n\n        if (todayWalkTime.updatedAt < startOfToday) {\n            await this.todayWalkTimeRepository.update({ id: todayWalkTime.id }, { duration: 0 });\n            return 0;\n        }\n\n        return todayWalkTime.duration;\n    }\n\n    async updateDurations(\n        walkTimeIds: number[],\n        duration: number,\n        operation: UpdateTodayWalkTimeOperation,\n    ): Promise<void> {\n        const todayWalkTimes = await this.findWalkTimesByIds(walkTimeIds);\n        if (!todayWalkTimes.length) {\n            const error = new NotFoundException(`id: ${walkTimeIds}와 일치하는 레코드가 없습니다`);\n            this.logger.error(`id: ${walkTimeIds}와 일치하는 레코드가 없습니다`, {\n                trace: error.stack ?? '스택 없음',\n            });\n            throw error;\n        }\n\n        const updateEntities: Partial<TodayWalkTime>[] = todayWalkTimes.map(\n            (cur) => new TodayWalkTime({ id: cur.id, duration: operation(cur.duration, duration) }),\n        );\n\n        await this.entityManager\n            .createQueryBuilder(TodayWalkTime, 'todayWalkTime')\n            .insert()\n            .into(TodayWalkTime, ['id', 'duration'])\n            .values(updateEntities)\n            .orUpdate(['duration'], ['id'])\n            .execute();\n    }\n\n    private async findWalkTimesByIds(walkTimeIds: number[]): Promise<TodayWalkTime[]> {\n        return await this.todayWalkTimeRepository.find({ where: { id: In(walkTimeIds) } });\n    }\n}\n"],"names":["TodayWalkTimeService","delete","where","todayWalkTimeRepository","updateIfStaleAndGetDuration","todayWalkTime","startOfToday","getStartOfToday","updatedAt","update","id","duration","updateDurations","walkTimeIds","operation","todayWalkTimes","findWalkTimesByIds","length","error","NotFoundException","logger","trace","stack","updateEntities","map","cur","TodayWalkTime","entityManager","createQueryBuilder","insert","into","values","orUpdate","execute","find","In","constructor","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAYaA;;;eAAAA;;;wBAZiC;yBAEM;qCAEtB;yCAEU;sCAEH;0BACL;;;;;;;;;;AAGzB,IAAA,AAAMA,uBAAN,MAAMA;IAOT,MAAMC,OAAOC,KAAsC,EAAE;QACjD,OAAO,MAAM,IAAI,CAACC,uBAAuB,CAACF,MAAM,CAACC;IACrD;IAEA,MAAME,4BAA4BC,aAA4B,EAAmB;QAC7E,MAAMC,eAAeC,IAAAA,yBAAe;QAEpC,IAAIF,cAAcG,SAAS,GAAGF,cAAc;YACxC,MAAM,IAAI,CAACH,uBAAuB,CAACM,MAAM,CAAC;gBAAEC,IAAIL,cAAcK,EAAE;YAAC,GAAG;gBAAEC,UAAU;YAAE;YAClF,OAAO;QACX;QAEA,OAAON,cAAcM,QAAQ;IACjC;IAEA,MAAMC,gBACFC,WAAqB,EACrBF,QAAgB,EAChBG,SAAuC,EAC1B;QACb,MAAMC,iBAAiB,MAAM,IAAI,CAACC,kBAAkB,CAACH;QACrD,IAAI,CAACE,eAAeE,MAAM,EAAE;YACxB,MAAMC,QAAQ,IAAIC,yBAAiB,CAAC,CAAC,IAAI,EAAEN,YAAY,gBAAgB,CAAC;gBAE7DK;YADX,IAAI,CAACE,MAAM,CAACF,KAAK,CAAC,CAAC,IAAI,EAAEL,YAAY,gBAAgB,CAAC,EAAE;gBACpDQ,OAAOH,CAAAA,eAAAA,MAAMI,KAAK,cAAXJ,0BAAAA,eAAe;YAC1B;YACA,MAAMA;QACV;QAEA,MAAMK,iBAA2CR,eAAeS,GAAG,CAC/D,CAACC,MAAQ,IAAIC,kCAAa,CAAC;gBAAEhB,IAAIe,IAAIf,EAAE;gBAAEC,UAAUG,UAAUW,IAAId,QAAQ,EAAEA;YAAU;QAGzF,MAAM,IAAI,CAACgB,aAAa,CACnBC,kBAAkB,CAACF,kCAAa,EAAE,iBAClCG,MAAM,GACNC,IAAI,CAACJ,kCAAa,EAAE;YAAC;YAAM;SAAW,EACtCK,MAAM,CAACR,gBACPS,QAAQ,CAAC;YAAC;SAAW,EAAE;YAAC;SAAK,EAC7BC,OAAO;IAChB;IAEA,MAAcjB,mBAAmBH,WAAqB,EAA4B;QAC9E,OAAO,MAAM,IAAI,CAACV,uBAAuB,CAAC+B,IAAI,CAAC;YAAEhC,OAAO;gBAAEQ,IAAIyB,IAAAA,WAAE,EAACtB;YAAa;QAAE;IACpF;IAlDAuB,YACI,AAAiBjC,uBAAgD,EACjE,AAAiBiB,MAA4B,EAC7C,AAAiBO,aAA4B,CAC/C;aAHmBxB,0BAAAA;aACAiB,SAAAA;aACAO,gBAAAA;IAClB;AA+CP;AApDa3B;IADZqC,IAAAA,kBAAU;;;eAGuC,gDAAuB,4BAAvB,gDAAuB;eACxC,0CAAoB,4BAApB,0CAAoB;eACb,sBAAa,4BAAb,sBAAa;;GAJxCrC"}