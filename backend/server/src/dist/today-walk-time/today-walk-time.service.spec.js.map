{"version":3,"sources":["../../src/today-walk-time/today-walk-time.service.spec.ts"],"sourcesContent":["import { NotFoundException } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { EntityManager, FindManyOptions, FindOperator, Repository, UpdateResult } from 'typeorm';\n\nimport { TodayWalkTime } from './today-walk-time.entity';\nimport { TodayWalkTimeRepository } from './today-walk-time.repository';\nimport { TodayWalkTimeService } from './today-walk-time.service';\n\nimport { WinstonLoggerService } from '../common/logger/winstonLogger.service';\n\ndescribe('ExcrementsService', () => {\n    let service: TodayWalkTimeService;\n    let todayWalkTimeRepository: Repository<TodayWalkTime>;\n\n    beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n            providers: [\n                TodayWalkTimeRepository,\n                TodayWalkTimeService,\n                WinstonLoggerService,\n                EntityManager,\n                {\n                    provide: getRepositoryToken(TodayWalkTime),\n                    useClass: Repository,\n                },\n            ],\n        }).compile();\n\n        service = module.get<TodayWalkTimeService>(TodayWalkTimeService);\n        todayWalkTimeRepository = module.get<Repository<TodayWalkTime>>(getRepositoryToken(TodayWalkTime));\n    });\n\n    const mockWalkTimes: TodayWalkTime[] = [\n        {\n            id: 1,\n            duration: 4109,\n            updatedAt: new Date('2024-06-23T00:00:00Z'),\n            setUpdatedAtBeforeUpdate: function (): void {\n                this.updatedAt = new Date();\n            },\n        },\n        {\n            id: 2,\n            duration: 5000,\n            updatedAt: new Date('2024-06-23T05:17:07.000Z'),\n            setUpdatedAtBeforeUpdate: function (): void {\n                this.updatedAt = new Date();\n            },\n        },\n        {\n            id: 3,\n            duration: 5,\n            updatedAt: new Date('2024-06-23T05:17:07.000Z'),\n            setUpdatedAtBeforeUpdate: function (): void {\n                this.updatedAt = new Date();\n            },\n        },\n    ];\n\n    describe('updateDurations', () => {\n        beforeEach(() => {\n            jest.spyOn(todayWalkTimeRepository, 'find').mockImplementation(createMockFindImplementation());\n            jest.spyOn(todayWalkTimeRepository, 'update').mockResolvedValue({ affected: 1 } as UpdateResult);\n        });\n\n        context('존재하지 않는 walkTimeIds가 주어지면', () => {\n            it('NotFoundException 예외를 던져야 한다.', async () => {\n                await expect(\n                    service.updateDurations([99, 100], 10, (current: number, operand: number) => current + operand),\n                ).rejects.toThrow(new NotFoundException('id: 99,100와 일치하는 레코드가 없습니다'));\n            });\n        });\n    });\n\n    const createMockFindImplementation = () => {\n        return (options?: FindManyOptions<TodayWalkTime>) => {\n            if (!options?.where) {\n                return Promise.resolve(mockWalkTimes);\n            }\n\n            const whereClause = options.where as Record<string, unknown>;\n            const findOperator = whereClause.id as FindOperator<number[]>;\n            const idList = (findOperator as any)._value;\n\n            return Promise.resolve(mockWalkTimes.filter((walkTime) => idList.includes(walkTime.id)));\n        };\n    };\n});\n"],"names":["describe","service","todayWalkTimeRepository","beforeEach","module","Test","createTestingModule","providers","TodayWalkTimeRepository","TodayWalkTimeService","WinstonLoggerService","EntityManager","provide","getRepositoryToken","TodayWalkTime","useClass","Repository","compile","get","mockWalkTimes","id","duration","updatedAt","Date","setUpdatedAtBeforeUpdate","jest","spyOn","mockImplementation","createMockFindImplementation","mockResolvedValue","affected","context","it","expect","updateDurations","current","operand","rejects","toThrow","NotFoundException","options","where","Promise","resolve","whereClause","findOperator","idList","_value","filter","walkTime","includes"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";wBAAkC;yBACE;yBACD;0BACoD;qCAEzD;yCACU;sCACH;sCAEA;AAErCA,SAAS,qBAAqB;IAC1B,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACP,MAAMC,SAAwB,MAAMC,aAAI,CAACC,mBAAmB,CAAC;YACzDC,WAAW;gBACPC,gDAAuB;gBACvBC,0CAAoB;gBACpBC,0CAAoB;gBACpBC,uBAAa;gBACb;oBACIC,SAASC,IAAAA,2BAAkB,EAACC,kCAAa;oBACzCC,UAAUC,oBAAU;gBACxB;aACH;QACL,GAAGC,OAAO;QAEVhB,UAAUG,OAAOc,GAAG,CAAuBT,0CAAoB;QAC/DP,0BAA0BE,OAAOc,GAAG,CAA4BL,IAAAA,2BAAkB,EAACC,kCAAa;IACpG;IAEA,MAAMK,gBAAiC;QACnC;YACIC,IAAI;YACJC,UAAU;YACVC,WAAW,IAAIC,KAAK;YACpBC,0BAA0B;gBACtB,IAAI,CAACF,SAAS,GAAG,IAAIC;YACzB;QACJ;QACA;YACIH,IAAI;YACJC,UAAU;YACVC,WAAW,IAAIC,KAAK;YACpBC,0BAA0B;gBACtB,IAAI,CAACF,SAAS,GAAG,IAAIC;YACzB;QACJ;QACA;YACIH,IAAI;YACJC,UAAU;YACVC,WAAW,IAAIC,KAAK;YACpBC,0BAA0B;gBACtB,IAAI,CAACF,SAAS,GAAG,IAAIC;YACzB;QACJ;KACH;IAEDvB,SAAS,mBAAmB;QACxBG,WAAW;YACPsB,KAAKC,KAAK,CAACxB,yBAAyB,QAAQyB,kBAAkB,CAACC;YAC/DH,KAAKC,KAAK,CAACxB,yBAAyB,UAAU2B,iBAAiB,CAAC;gBAAEC,UAAU;YAAE;QAClF;QAEAC,QAAQ,6BAA6B;YACjCC,GAAG,iCAAiC;gBAChC,MAAMC,OACFhC,QAAQiC,eAAe,CAAC;oBAAC;oBAAI;iBAAI,EAAE,IAAI,CAACC,SAAiBC,UAAoBD,UAAUC,UACzFC,OAAO,CAACC,OAAO,CAAC,IAAIC,yBAAiB,CAAC;YAC5C;QACJ;IACJ;IAEA,MAAMX,+BAA+B;QACjC,OAAO,CAACY;YACJ,IAAI,EAACA,oBAAAA,8BAAAA,QAASC,KAAK,GAAE;gBACjB,OAAOC,QAAQC,OAAO,CAACxB;YAC3B;YAEA,MAAMyB,cAAcJ,QAAQC,KAAK;YACjC,MAAMI,eAAeD,YAAYxB,EAAE;YACnC,MAAM0B,SAAS,AAACD,aAAqBE,MAAM;YAE3C,OAAOL,QAAQC,OAAO,CAACxB,cAAc6B,MAAM,CAAC,CAACC,WAAaH,OAAOI,QAAQ,CAACD,SAAS7B,EAAE;QACzF;IACJ;AACJ"}