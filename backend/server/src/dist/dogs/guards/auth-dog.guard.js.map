{"version":3,"sources":["../../../src/dogs/guards/auth-dog.guard.ts"],"sourcesContent":["import { BadRequestException, CanActivate, ExecutionContext, ForbiddenException, Injectable } from '@nestjs/common';\n\nimport { WinstonLoggerService } from '../../common/logger/winstonLogger.service';\nimport { UsersService } from '../../users/users.service';\n\n@Injectable()\nexport class AuthDogGuard implements CanActivate {\n    constructor(\n        private readonly usersService: UsersService,\n        private readonly logger: WinstonLoggerService,\n    ) {}\n\n    async canActivate(context: ExecutionContext): Promise<boolean> {\n        const request = context.switchToHttp().getRequest();\n        const { userId } = request.user;\n        const dogId = this.getDogId(request);\n\n        await this.checkDogOwnership(userId, dogId);\n\n        return true;\n    }\n\n    private getDogId(request: any): number {\n        const id = request.query.dogId || request.params.id;\n\n        if (!this.isInt(id)) {\n            const error = new BadRequestException('dogId가 정수가 아닙니다');\n            this.logger.error('dogId가 정수가 아닙니다', {\n                trace: error.stack ?? '스택 없음',\n            });\n            throw error;\n        }\n\n        return parseInt(id);\n    }\n\n    private async checkDogOwnership(userId: number, dogId: number): Promise<void> {\n        const [owned] = await this.usersService.checkDogOwnership(userId, dogId);\n\n        if (!owned) {\n            const error = new ForbiddenException(`유저 ${userId}은/는 강아지${dogId}의 주인이 아닙니다`);\n            this.logger.error(`유저 ${userId}은/는 ${dogId}의 주인이 아닙니다`, { trace: error.stack ?? '스택 없음' });\n            throw error;\n        }\n    }\n\n    private isInt(value: any): boolean {\n        const regex = /^\\d+$/;\n        return regex.test(value);\n    }\n}\n"],"names":["AuthDogGuard","canActivate","context","request","switchToHttp","getRequest","userId","user","dogId","getDogId","checkDogOwnership","id","query","params","isInt","error","BadRequestException","logger","trace","stack","parseInt","owned","usersService","ForbiddenException","value","regex","test","constructor","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAMaA;;;eAAAA;;;wBANsF;sCAE9D;8BACR;;;;;;;;;;AAGtB,IAAA,AAAMA,eAAN,MAAMA;IAMT,MAAMC,YAAYC,OAAyB,EAAoB;QAC3D,MAAMC,UAAUD,QAAQE,YAAY,GAAGC,UAAU;QACjD,MAAM,EAAEC,MAAM,EAAE,GAAGH,QAAQI,IAAI;QAC/B,MAAMC,QAAQ,IAAI,CAACC,QAAQ,CAACN;QAE5B,MAAM,IAAI,CAACO,iBAAiB,CAACJ,QAAQE;QAErC,OAAO;IACX;IAEQC,SAASN,OAAY,EAAU;QACnC,MAAMQ,KAAKR,QAAQS,KAAK,CAACJ,KAAK,IAAIL,QAAQU,MAAM,CAACF,EAAE;QAEnD,IAAI,CAAC,IAAI,CAACG,KAAK,CAACH,KAAK;YACjB,MAAMI,QAAQ,IAAIC,2BAAmB,CAAC;gBAE3BD;YADX,IAAI,CAACE,MAAM,CAACF,KAAK,CAAC,mBAAmB;gBACjCG,OAAOH,CAAAA,eAAAA,MAAMI,KAAK,cAAXJ,0BAAAA,eAAe;YAC1B;YACA,MAAMA;QACV;QAEA,OAAOK,SAAST;IACpB;IAEA,MAAcD,kBAAkBJ,MAAc,EAAEE,KAAa,EAAiB;QAC1E,MAAM,CAACa,MAAM,GAAG,MAAM,IAAI,CAACC,YAAY,CAACZ,iBAAiB,CAACJ,QAAQE;QAElE,IAAI,CAACa,OAAO;YACR,MAAMN,QAAQ,IAAIQ,0BAAkB,CAAC,CAAC,GAAG,EAAEjB,OAAO,OAAO,EAAEE,MAAM,UAAU,CAAC;gBACXO;YAAjE,IAAI,CAACE,MAAM,CAACF,KAAK,CAAC,CAAC,GAAG,EAAET,OAAO,IAAI,EAAEE,MAAM,UAAU,CAAC,EAAE;gBAAEU,OAAOH,CAAAA,eAAAA,MAAMI,KAAK,cAAXJ,0BAAAA,eAAe;YAAQ;YACxF,MAAMA;QACV;IACJ;IAEQD,MAAMU,KAAU,EAAW;QAC/B,MAAMC,QAAQ;QACd,OAAOA,MAAMC,IAAI,CAACF;IACtB;IA1CAG,YACI,AAAiBL,YAA0B,EAC3C,AAAiBL,MAA4B,CAC/C;aAFmBK,eAAAA;aACAL,SAAAA;IAClB;AAwCP;AA5CajB;IADZ4B,IAAAA,kBAAU;;;eAG4B,0BAAY,4BAAZ,0BAAY;eAClB,0CAAoB,4BAApB,0CAAoB;;GAHxC5B"}