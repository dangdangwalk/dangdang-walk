{"version":3,"sources":["../../src/dogs/dogs.service.ts"],"sourcesContent":["import { ConflictException, Injectable } from '@nestjs/common';\nimport { EntityManager, FindManyOptions, FindOneOptions, FindOptionsWhere, In } from 'typeorm';\nimport { Transactional } from 'typeorm-transactional';\n\nimport { Dogs } from './dogs.entity';\nimport { DogsRepository } from './dogs.repository';\n\nimport { CreateDogRequest, UpdateDogRequest, DogProfileResponse, DogSummaryResponse } from './types/dogs.type';\n\nimport { BreedService } from '../breed/breed.service';\nimport { WinstonLoggerService } from '../common/logger/winstonLogger.service';\nimport { DogWalkDay } from '../dog-walk-day/dog-walk-day.entity';\nimport { DogWalkDayService } from '../dog-walk-day/dog-walk-day.service';\nimport { S3Service } from '../s3/s3.service';\nimport { TodayWalkTime } from '../today-walk-time/today-walk-time.entity';\nimport { TodayWalkTimeService } from '../today-walk-time/today-walk-time.service';\nimport { UsersService } from '../users/users.service';\nimport { UsersDogs } from '../users-dogs/users-dogs.entity';\nimport { UsersDogsService } from '../users-dogs/users-dogs.service';\n\nimport { makeSubObject, makeSubObjectsArray } from '../utils/manipulate.util';\n\n@Injectable()\nexport class DogsService {\n    constructor(\n        private readonly dogsRepository: DogsRepository,\n        private readonly usersService: UsersService,\n        private readonly usersDogsService: UsersDogsService,\n        private readonly breedService: BreedService,\n        private readonly dogWalkDayService: DogWalkDayService,\n        private readonly todayWalkTimeService: TodayWalkTimeService,\n        private readonly s3Service: S3Service,\n        private readonly entityManager: EntityManager,\n        private readonly logger: WinstonLoggerService,\n    ) {}\n\n    @Transactional()\n    async createDogToUser(userId: number, dogDto: CreateDogRequest): Promise<void> {\n        try {\n            const { breed: breedName, ...otherAttributes } = dogDto;\n\n            const breed = await this.breedService.findOne({ where: { koreanName: breedName } });\n\n            const newDog = new Dogs({\n                breed,\n                walkDay: new DogWalkDay({}),\n                todayWalkTime: new TodayWalkTime({}),\n                ...otherAttributes,\n            });\n\n            const dog = await this.dogsRepository.create(newDog);\n\n            await this.usersDogsService.create({ userId, dogId: dog.id });\n        } catch (error) {\n            this.logger.error(`존재하지 않는 견종입니다`, { trace: error.stack ?? '스택 없음' });\n            throw error;\n        }\n    }\n\n    @Transactional()\n    async deleteDogFromUser(userId: number, dogId: number): Promise<void> {\n        const dog = await this.dogsRepository.findOne({ where: { id: dogId } });\n\n        if (dog.isWalking) {\n            const error = new ConflictException(`강아지 ${dog.id}은/는 산책 중입니다. 삭제할 수 없습니다`);\n            this.logger.error(`강아지 ${dog.id}은/는 산책 중입니다. 삭제할 수 없습니다`, {\n                trace: error.stack ?? '스택 없음',\n            });\n            throw error;\n        }\n\n        await this.dogWalkDayService.delete({ id: dog.walkDayId });\n        await this.todayWalkTimeService.delete({ id: dog.todayWalkTimeId });\n        if (dog.profilePhotoUrl) {\n            await this.s3Service.deleteSingleObject(userId, dog.profilePhotoUrl);\n        }\n    }\n\n    @Transactional()\n    async deleteOwnDogs(userId: number) {\n        const dogIds = await this.usersService.getOwnDogsList(userId);\n\n        if (!dogIds.length) return;\n\n        const dogs = await this.dogsRepository.find({\n            where: { id: In(dogIds) },\n            select: ['walkDayId', 'todayWalkTimeId', 'profilePhotoUrl'],\n        });\n\n        const walkDayIds = dogs.map((dog) => dog.walkDayId);\n        const todayWalkTimeIds = dogs.map((dog) => dog.todayWalkTimeId);\n        const profilePhotoUrls = dogs.map((dog) => dog.profilePhotoUrl).filter((url): url is string => url !== null);\n\n        await Promise.all([\n            this.dogWalkDayService.delete({ id: In(walkDayIds) }),\n            this.todayWalkTimeService.delete({ id: In(todayWalkTimeIds) }),\n            profilePhotoUrls.length ? this.s3Service.deleteObjects(userId, profilePhotoUrls) : Promise.resolve(),\n        ]);\n    }\n\n    async find(where: FindManyOptions<Dogs>): Promise<Dogs[]> {\n        return await this.dogsRepository.find(where);\n    }\n\n    async findOne(where: FindOneOptions<Dogs>) {\n        return await this.dogsRepository.findOne(where);\n    }\n\n    async updateDog(userId: number, dogId: number, dogDto: UpdateDogRequest): Promise<void> {\n        const { breed: breedName, ...otherAttributes } = dogDto;\n        let breed;\n\n        if (breedName) {\n            breed = await this.breedService.findOne({ where: { koreanName: breedName } });\n        }\n\n        if (dogDto.profilePhotoUrl) {\n            const curDogInfo = await this.dogsRepository.findOne({ where: { id: dogId } });\n            if (curDogInfo && curDogInfo.profilePhotoUrl) {\n                await this.s3Service.deleteSingleObject(userId, curDogInfo.profilePhotoUrl);\n            }\n        }\n\n        const updateData = breed ? { breedId: breed.id, ...otherAttributes } : otherAttributes;\n        await this.dogsRepository.update({ id: dogId }, updateData);\n    }\n\n    async updateIsWalking(dogIds: number | number[], stateToUpdate: boolean) {\n        dogIds = Array.isArray(dogIds) ? dogIds : [dogIds];\n\n        const attrs = {\n            isWalking: stateToUpdate,\n        };\n\n        await this.dogsRepository.update({ id: In(dogIds) }, attrs);\n\n        return dogIds;\n    }\n\n    private makeProfile(dogInfo: Dogs): DogProfileResponse {\n        return {\n            ...makeSubObject(dogInfo, DogProfileResponse.getFieldsForDogTableAndRaw()),\n            breed: dogInfo.breed.koreanName,\n        };\n    }\n\n    private makeDogsSummaryList(dogs: Dogs[]): DogSummaryResponse[] {\n        return makeSubObjectsArray(dogs, DogSummaryResponse.getFieldsForDogTableAndRaw());\n    }\n\n    async getDogsSummaryList(where: FindOptionsWhere<Dogs>): Promise<DogSummaryResponse[]> {\n        const dogInfos = await this.dogsRepository.find({\n            where,\n            select: DogSummaryResponse.getFieldsForDogTableAndRaw(),\n        });\n        return this.makeDogsSummaryList(dogInfos);\n    }\n\n    async getProfile(dogId: number): Promise<DogProfileResponse> {\n        const dogInfo = await this.dogsRepository.findOne({\n            where: { id: dogId },\n            select: DogProfileResponse.getFieldsForDogTableAndRaw(),\n        });\n        return this.makeProfile(dogInfo);\n    }\n\n    async getProfileList(userId: number): Promise<DogProfileResponse[]> {\n        const dogInfos = await this.entityManager\n            .createQueryBuilder(Dogs, 'dogs')\n            .innerJoin(UsersDogs, 'users_dogs', 'users_dogs.dogId = dogs.id')\n            .innerJoinAndSelect('dogs.breed', 'breed')\n            .where('users_dogs.userId = :userId', { userId })\n            .getMany();\n\n        return dogInfos.map((dogInfo) => this.makeProfile(dogInfo));\n    }\n\n    async getRelatedTableIdList(\n        ownDogIds: number[],\n        attributeName: 'walkDayId' | 'todayWalkTimeId' | 'breedId',\n    ): Promise<number[]> {\n        const ownDogList = await this.dogsRepository.find({ where: { id: In(ownDogIds) } });\n        return ownDogList.map((cur) => {\n            return cur[attributeName];\n        });\n    }\n}\n"],"names":["DogsService","createDogToUser","userId","dogDto","breed","breedName","otherAttributes","breedService","findOne","where","koreanName","newDog","Dogs","walkDay","DogWalkDay","todayWalkTime","TodayWalkTime","dog","dogsRepository","create","usersDogsService","dogId","id","error","logger","trace","stack","deleteDogFromUser","isWalking","ConflictException","dogWalkDayService","delete","walkDayId","todayWalkTimeService","todayWalkTimeId","profilePhotoUrl","s3Service","deleteSingleObject","deleteOwnDogs","dogIds","usersService","getOwnDogsList","length","dogs","find","In","select","walkDayIds","map","todayWalkTimeIds","profilePhotoUrls","filter","url","Promise","all","deleteObjects","resolve","updateDog","curDogInfo","updateData","breedId","update","updateIsWalking","stateToUpdate","Array","isArray","attrs","makeProfile","dogInfo","makeSubObject","DogProfileResponse","getFieldsForDogTableAndRaw","makeDogsSummaryList","makeSubObjectsArray","DogSummaryResponse","getDogsSummaryList","dogInfos","getProfile","getProfileList","entityManager","createQueryBuilder","innerJoin","UsersDogs","innerJoinAndSelect","getMany","getRelatedTableIdList","ownDogIds","attributeName","ownDogList","cur","constructor","Transactional","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAuBaA;;;eAAAA;;;wBAvBiC;yBACuC;sCACvD;4BAET;gCACU;0BAE4D;8BAE9D;sCACQ;kCACV;mCACO;2BACR;qCACI;sCACO;8BACR;iCACH;kCACO;gCAEkB;;;;;;;;;;AAG5C,IAAA,AAAMA,cAAN,MAAMA;IAaT,MACMC,gBAAgBC,MAAc,EAAEC,MAAwB,EAAiB;QAC3E,IAAI;YACA,MAAM,EAAEC,OAAOC,SAAS,EAAE,GAAGC,iBAAiB,GAAGH;YAEjD,MAAMC,QAAQ,MAAM,IAAI,CAACG,YAAY,CAACC,OAAO,CAAC;gBAAEC,OAAO;oBAAEC,YAAYL;gBAAU;YAAE;YAEjF,MAAMM,SAAS,IAAIC,gBAAI,CAAC;gBACpBR;gBACAS,SAAS,IAAIC,4BAAU,CAAC,CAAC;gBACzBC,eAAe,IAAIC,kCAAa,CAAC,CAAC;gBAClC,GAAGV,eAAe;YACtB;YAEA,MAAMW,MAAM,MAAM,IAAI,CAACC,cAAc,CAACC,MAAM,CAACR;YAE7C,MAAM,IAAI,CAACS,gBAAgB,CAACD,MAAM,CAAC;gBAAEjB;gBAAQmB,OAAOJ,IAAIK,EAAE;YAAC;QAC/D,EAAE,OAAOC,OAAO;gBACgCA;YAA5C,IAAI,CAACC,MAAM,CAACD,KAAK,CAAC,CAAC,aAAa,CAAC,EAAE;gBAAEE,OAAOF,CAAAA,eAAAA,MAAMG,KAAK,cAAXH,0BAAAA,eAAe;YAAQ;YACnE,MAAMA;QACV;IACJ;IAEA,MACMI,kBAAkBzB,MAAc,EAAEmB,KAAa,EAAiB;QAClE,MAAMJ,MAAM,MAAM,IAAI,CAACC,cAAc,CAACV,OAAO,CAAC;YAAEC,OAAO;gBAAEa,IAAID;YAAM;QAAE;QAErE,IAAIJ,IAAIW,SAAS,EAAE;YACf,MAAML,QAAQ,IAAIM,yBAAiB,CAAC,CAAC,IAAI,EAAEZ,IAAIK,EAAE,CAAC,uBAAuB,CAAC;gBAE/DC;YADX,IAAI,CAACC,MAAM,CAACD,KAAK,CAAC,CAAC,IAAI,EAAEN,IAAIK,EAAE,CAAC,uBAAuB,CAAC,EAAE;gBACtDG,OAAOF,CAAAA,eAAAA,MAAMG,KAAK,cAAXH,0BAAAA,eAAe;YAC1B;YACA,MAAMA;QACV;QAEA,MAAM,IAAI,CAACO,iBAAiB,CAACC,MAAM,CAAC;YAAET,IAAIL,IAAIe,SAAS;QAAC;QACxD,MAAM,IAAI,CAACC,oBAAoB,CAACF,MAAM,CAAC;YAAET,IAAIL,IAAIiB,eAAe;QAAC;QACjE,IAAIjB,IAAIkB,eAAe,EAAE;YACrB,MAAM,IAAI,CAACC,SAAS,CAACC,kBAAkB,CAACnC,QAAQe,IAAIkB,eAAe;QACvE;IACJ;IAEA,MACMG,cAAcpC,MAAc,EAAE;QAChC,MAAMqC,SAAS,MAAM,IAAI,CAACC,YAAY,CAACC,cAAc,CAACvC;QAEtD,IAAI,CAACqC,OAAOG,MAAM,EAAE;QAEpB,MAAMC,OAAO,MAAM,IAAI,CAACzB,cAAc,CAAC0B,IAAI,CAAC;YACxCnC,OAAO;gBAAEa,IAAIuB,IAAAA,WAAE,EAACN;YAAQ;YACxBO,QAAQ;gBAAC;gBAAa;gBAAmB;aAAkB;QAC/D;QAEA,MAAMC,aAAaJ,KAAKK,GAAG,CAAC,CAAC/B,MAAQA,IAAIe,SAAS;QAClD,MAAMiB,mBAAmBN,KAAKK,GAAG,CAAC,CAAC/B,MAAQA,IAAIiB,eAAe;QAC9D,MAAMgB,mBAAmBP,KAAKK,GAAG,CAAC,CAAC/B,MAAQA,IAAIkB,eAAe,EAAEgB,MAAM,CAAC,CAACC,MAAuBA,QAAQ;QAEvG,MAAMC,QAAQC,GAAG,CAAC;YACd,IAAI,CAACxB,iBAAiB,CAACC,MAAM,CAAC;gBAAET,IAAIuB,IAAAA,WAAE,EAACE;YAAY;YACnD,IAAI,CAACd,oBAAoB,CAACF,MAAM,CAAC;gBAAET,IAAIuB,IAAAA,WAAE,EAACI;YAAkB;YAC5DC,iBAAiBR,MAAM,GAAG,IAAI,CAACN,SAAS,CAACmB,aAAa,CAACrD,QAAQgD,oBAAoBG,QAAQG,OAAO;SACrG;IACL;IAEA,MAAMZ,KAAKnC,KAA4B,EAAmB;QACtD,OAAO,MAAM,IAAI,CAACS,cAAc,CAAC0B,IAAI,CAACnC;IAC1C;IAEA,MAAMD,QAAQC,KAA2B,EAAE;QACvC,OAAO,MAAM,IAAI,CAACS,cAAc,CAACV,OAAO,CAACC;IAC7C;IAEA,MAAMgD,UAAUvD,MAAc,EAAEmB,KAAa,EAAElB,MAAwB,EAAiB;QACpF,MAAM,EAAEC,OAAOC,SAAS,EAAE,GAAGC,iBAAiB,GAAGH;QACjD,IAAIC;QAEJ,IAAIC,WAAW;YACXD,QAAQ,MAAM,IAAI,CAACG,YAAY,CAACC,OAAO,CAAC;gBAAEC,OAAO;oBAAEC,YAAYL;gBAAU;YAAE;QAC/E;QAEA,IAAIF,OAAOgC,eAAe,EAAE;YACxB,MAAMuB,aAAa,MAAM,IAAI,CAACxC,cAAc,CAACV,OAAO,CAAC;gBAAEC,OAAO;oBAAEa,IAAID;gBAAM;YAAE;YAC5E,IAAIqC,cAAcA,WAAWvB,eAAe,EAAE;gBAC1C,MAAM,IAAI,CAACC,SAAS,CAACC,kBAAkB,CAACnC,QAAQwD,WAAWvB,eAAe;YAC9E;QACJ;QAEA,MAAMwB,aAAavD,QAAQ;YAAEwD,SAASxD,MAAMkB,EAAE;YAAE,GAAGhB,eAAe;QAAC,IAAIA;QACvE,MAAM,IAAI,CAACY,cAAc,CAAC2C,MAAM,CAAC;YAAEvC,IAAID;QAAM,GAAGsC;IACpD;IAEA,MAAMG,gBAAgBvB,MAAyB,EAAEwB,aAAsB,EAAE;QACrExB,SAASyB,MAAMC,OAAO,CAAC1B,UAAUA,SAAS;YAACA;SAAO;QAElD,MAAM2B,QAAQ;YACVtC,WAAWmC;QACf;QAEA,MAAM,IAAI,CAAC7C,cAAc,CAAC2C,MAAM,CAAC;YAAEvC,IAAIuB,IAAAA,WAAE,EAACN;QAAQ,GAAG2B;QAErD,OAAO3B;IACX;IAEQ4B,YAAYC,OAAa,EAAsB;QACnD,OAAO;YACH,GAAGC,IAAAA,6BAAa,EAACD,SAASE,4BAAkB,CAACC,0BAA0B,GAAG;YAC1EnE,OAAOgE,QAAQhE,KAAK,CAACM,UAAU;QACnC;IACJ;IAEQ8D,oBAAoB7B,IAAY,EAAwB;QAC5D,OAAO8B,IAAAA,mCAAmB,EAAC9B,MAAM+B,4BAAkB,CAACH,0BAA0B;IAClF;IAEA,MAAMI,mBAAmBlE,KAA6B,EAAiC;QACnF,MAAMmE,WAAW,MAAM,IAAI,CAAC1D,cAAc,CAAC0B,IAAI,CAAC;YAC5CnC;YACAqC,QAAQ4B,4BAAkB,CAACH,0BAA0B;QACzD;QACA,OAAO,IAAI,CAACC,mBAAmB,CAACI;IACpC;IAEA,MAAMC,WAAWxD,KAAa,EAA+B;QACzD,MAAM+C,UAAU,MAAM,IAAI,CAAClD,cAAc,CAACV,OAAO,CAAC;YAC9CC,OAAO;gBAAEa,IAAID;YAAM;YACnByB,QAAQwB,4BAAkB,CAACC,0BAA0B;QACzD;QACA,OAAO,IAAI,CAACJ,WAAW,CAACC;IAC5B;IAEA,MAAMU,eAAe5E,MAAc,EAAiC;QAChE,MAAM0E,WAAW,MAAM,IAAI,CAACG,aAAa,CACpCC,kBAAkB,CAACpE,gBAAI,EAAE,QACzBqE,SAAS,CAACC,0BAAS,EAAE,cAAc,8BACnCC,kBAAkB,CAAC,cAAc,SACjC1E,KAAK,CAAC,+BAA+B;YAAEP;QAAO,GAC9CkF,OAAO;QAEZ,OAAOR,SAAS5B,GAAG,CAAC,CAACoB,UAAY,IAAI,CAACD,WAAW,CAACC;IACtD;IAEA,MAAMiB,sBACFC,SAAmB,EACnBC,aAA0D,EACzC;QACjB,MAAMC,aAAa,MAAM,IAAI,CAACtE,cAAc,CAAC0B,IAAI,CAAC;YAAEnC,OAAO;gBAAEa,IAAIuB,IAAAA,WAAE,EAACyC;YAAW;QAAE;QACjF,OAAOE,WAAWxC,GAAG,CAAC,CAACyC;YACnB,OAAOA,GAAG,CAACF,cAAc;QAC7B;IACJ;IAjKAG,YACI,AAAiBxE,cAA8B,EAC/C,AAAiBsB,YAA0B,EAC3C,AAAiBpB,gBAAkC,EACnD,AAAiBb,YAA0B,EAC3C,AAAiBuB,iBAAoC,EACrD,AAAiBG,oBAA0C,EAC3D,AAAiBG,SAAoB,EACrC,AAAiB2C,aAA4B,EAC7C,AAAiBvD,MAA4B,CAC/C;aATmBN,iBAAAA;aACAsB,eAAAA;aACApB,mBAAAA;aACAb,eAAAA;aACAuB,oBAAAA;aACAG,uBAAAA;aACAG,YAAAA;aACA2C,gBAAAA;aACAvD,SAAAA;IAClB;AAwJP;;IAtJKmE,IAAAA,mCAAa;;;;eACgC,0BAAgB,4BAAhB,0BAAgB;;;GAdrD3F;;IAoCR2F,IAAAA,mCAAa;;;;;;;GApCL3F;;IAuDR2F,IAAAA,mCAAa;;;;;;GAvDL3F;AAAAA;IADZ4F,IAAAA,kBAAU;;;eAG8B,8BAAc,4BAAd,8BAAc;eAChB,0BAAY,4BAAZ,0BAAY;eACR,kCAAgB,4BAAhB,kCAAgB;eACpB,0BAAY,4BAAZ,0BAAY;eACP,oCAAiB,4BAAjB,oCAAiB;eACd,0CAAoB,4BAApB,0CAAoB;eAC/B,oBAAS,4BAAT,oBAAS;eACL,sBAAa,4BAAb,sBAAa;eACpB,0CAAoB,4BAApB,0CAAoB;;GAVxC5F"}