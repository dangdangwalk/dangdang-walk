{"version":3,"sources":["../../src/walk/walk.service.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { DogSummaryResponse } from 'src/dogs/types/dogs.type';\nimport { Repository } from 'typeorm';\n\nimport { TestWalkService } from './test.walk.service';\nimport { WalkService } from './walk.service';\n\nimport { Dogs } from '../dogs/dogs.entity';\nimport { DogsService } from '../dogs/dogs.service';\nimport { UsersService } from '../users/users.service';\n\ndescribe('WalkService', () => {\n    let service: TestWalkService;\n    let usersService: UsersService;\n    let dogsService: DogsService;\n\n    beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n            providers: [\n                WalkService,\n                UsersService,\n                {\n                    provide: UsersService,\n                    useValue: {\n                        getOwnDogsList: jest.fn(),\n                    },\n                },\n                {\n                    provide: DogsService,\n                    useValue: {\n                        getDogsSummaryList: jest.fn(),\n                        findOne: jest.fn(),\n                        updateIsWalking: jest.fn(),\n                    },\n                },\n                {\n                    provide: getRepositoryToken(Dogs),\n                    useClass: Repository,\n                },\n            ],\n        }).compile();\n\n        service = module.get<TestWalkService>(WalkService);\n        usersService = module.get<UsersService>(UsersService);\n        dogsService = module.get<DogsService>(DogsService);\n    });\n\n    describe('getAvailableDogs', () => {\n        const userId = 1;\n        const ownDogIds = [1, 2, 3];\n        const availableDogs: DogSummaryResponse[] = [\n            { id: 1, name: 'dangdang1', profilePhotoUrl: 'https://example.com/dog1.jpg' },\n            { id: 2, name: 'dangdang2', profilePhotoUrl: 'https://example.com/dog2.jpg' },\n        ];\n\n        context('사용자 id가 주어지면', () => {\n            beforeEach(() => {\n                jest.spyOn(usersService, 'getOwnDogsList').mockResolvedValueOnce(ownDogIds);\n                jest.spyOn(service, 'updateExpiredWalkStatus').mockResolvedValueOnce();\n                jest.spyOn(dogsService, 'getDogsSummaryList').mockResolvedValue(availableDogs);\n            });\n\n            it('소유한 강아지 목록을 반환한다.', async () => {\n                const dogSummaries = await service.getAvailableDogs(userId);\n\n                expect(dogSummaries).toEqual([\n                    { id: 1, name: 'dangdang1', profilePhotoUrl: 'https://example.com/dog1.jpg' },\n                    { id: 2, name: 'dangdang2', profilePhotoUrl: 'https://example.com/dog2.jpg' },\n                ]);\n            });\n        });\n    });\n});\n"],"names":["describe","service","usersService","dogsService","beforeEach","module","Test","createTestingModule","providers","WalkService","UsersService","provide","useValue","getOwnDogsList","jest","fn","DogsService","getDogsSummaryList","findOne","updateIsWalking","getRepositoryToken","Dogs","useClass","Repository","compile","get","userId","ownDogIds","availableDogs","id","name","profilePhotoUrl","context","spyOn","mockResolvedValueOnce","mockResolvedValue","it","dogSummaries","getAvailableDogs","expect","toEqual"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";yBAAoC;yBACD;0BAER;6BAGC;4BAEP;6BACO;8BACC;AAE7BA,SAAS,eAAe;IACpB,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACP,MAAMC,SAAwB,MAAMC,aAAI,CAACC,mBAAmB,CAAC;YACzDC,WAAW;gBACPC,wBAAW;gBACXC,0BAAY;gBACZ;oBACIC,SAASD,0BAAY;oBACrBE,UAAU;wBACNC,gBAAgBC,KAAKC,EAAE;oBAC3B;gBACJ;gBACA;oBACIJ,SAASK,wBAAW;oBACpBJ,UAAU;wBACNK,oBAAoBH,KAAKC,EAAE;wBAC3BG,SAASJ,KAAKC,EAAE;wBAChBI,iBAAiBL,KAAKC,EAAE;oBAC5B;gBACJ;gBACA;oBACIJ,SAASS,IAAAA,2BAAkB,EAACC,gBAAI;oBAChCC,UAAUC,oBAAU;gBACxB;aACH;QACL,GAAGC,OAAO;QAEVvB,UAAUI,OAAOoB,GAAG,CAAkBhB,wBAAW;QACjDP,eAAeG,OAAOoB,GAAG,CAAef,0BAAY;QACpDP,cAAcE,OAAOoB,GAAG,CAAcT,wBAAW;IACrD;IAEAhB,SAAS,oBAAoB;QACzB,MAAM0B,SAAS;QACf,MAAMC,YAAY;YAAC;YAAG;YAAG;SAAE;QAC3B,MAAMC,gBAAsC;YACxC;gBAAEC,IAAI;gBAAGC,MAAM;gBAAaC,iBAAiB;YAA+B;YAC5E;gBAAEF,IAAI;gBAAGC,MAAM;gBAAaC,iBAAiB;YAA+B;SAC/E;QAEDC,QAAQ,gBAAgB;YACpB5B,WAAW;gBACPU,KAAKmB,KAAK,CAAC/B,cAAc,kBAAkBgC,qBAAqB,CAACP;gBACjEb,KAAKmB,KAAK,CAAChC,SAAS,2BAA2BiC,qBAAqB;gBACpEpB,KAAKmB,KAAK,CAAC9B,aAAa,sBAAsBgC,iBAAiB,CAACP;YACpE;YAEAQ,GAAG,qBAAqB;gBACpB,MAAMC,eAAe,MAAMpC,QAAQqC,gBAAgB,CAACZ;gBAEpDa,OAAOF,cAAcG,OAAO,CAAC;oBACzB;wBAAEX,IAAI;wBAAGC,MAAM;wBAAaC,iBAAiB;oBAA+B;oBAC5E;wBAAEF,IAAI;wBAAGC,MAAM;wBAAaC,iBAAiB;oBAA+B;iBAC/E;YACL;QACJ;IACJ;AACJ"}