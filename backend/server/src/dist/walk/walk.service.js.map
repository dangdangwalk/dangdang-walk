{"version":3,"sources":["../../src/walk/walk.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { DogSummaryResponse } from 'src/dogs/types/dogs.type';\nimport { In } from 'typeorm';\n\nimport { DogsService } from '../dogs/dogs.service';\nimport { UsersService } from '../users/users.service';\n\nconst MAX_WALK_TIME = 3;\n\n@Injectable()\nexport class WalkService {\n    constructor(\n        private readonly usersService: UsersService,\n        private readonly dogsService: DogsService,\n    ) {}\n\n    async getAvailableDogs(userId: number): Promise<DogSummaryResponse[]> {\n        const ownDogIds = await this.usersService.getOwnDogsList(userId);\n        await this.updateExpiredWalkStatus(ownDogIds);\n\n        return await this.dogsService.getDogsSummaryList({ id: In(ownDogIds), isWalking: false });\n    }\n\n    protected async updateExpiredWalkStatus(dogIds: number[]) {\n        const dogs = await this.dogsService.find({\n            where: { id: In(dogIds) },\n            select: ['id', 'isWalking', 'updatedAt'],\n        });\n\n        const expiredWalkDogIds = dogs\n            .filter((dog) => {\n                if (!dog.isWalking) return false;\n\n                const expirationTime = dog.updatedAt;\n                expirationTime.setHours(expirationTime.getHours() + MAX_WALK_TIME);\n\n                return new Date() >= expirationTime;\n            })\n            .map((dog) => dog.id);\n\n        if (expiredWalkDogIds.length > 0) {\n            await this.dogsService.updateIsWalking(expiredWalkDogIds, false);\n        }\n    }\n}\n"],"names":["WalkService","MAX_WALK_TIME","getAvailableDogs","userId","ownDogIds","usersService","getOwnDogsList","updateExpiredWalkStatus","dogsService","getDogsSummaryList","id","In","isWalking","dogIds","dogs","find","where","select","expiredWalkDogIds","filter","dog","expirationTime","updatedAt","setHours","getHours","Date","map","length","updateIsWalking","constructor","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAUaA;;;eAAAA;;;wBAVc;yBAER;6BAES;8BACC;;;;;;;;;;AAE7B,MAAMC,gBAAgB;AAGf,IAAA,AAAMD,cAAN,MAAMA;IAMT,MAAME,iBAAiBC,MAAc,EAAiC;QAClE,MAAMC,YAAY,MAAM,IAAI,CAACC,YAAY,CAACC,cAAc,CAACH;QACzD,MAAM,IAAI,CAACI,uBAAuB,CAACH;QAEnC,OAAO,MAAM,IAAI,CAACI,WAAW,CAACC,kBAAkB,CAAC;YAAEC,IAAIC,IAAAA,WAAE,EAACP;YAAYQ,WAAW;QAAM;IAC3F;IAEA,MAAgBL,wBAAwBM,MAAgB,EAAE;QACtD,MAAMC,OAAO,MAAM,IAAI,CAACN,WAAW,CAACO,IAAI,CAAC;YACrCC,OAAO;gBAAEN,IAAIC,IAAAA,WAAE,EAACE;YAAQ;YACxBI,QAAQ;gBAAC;gBAAM;gBAAa;aAAY;QAC5C;QAEA,MAAMC,oBAAoBJ,KACrBK,MAAM,CAAC,CAACC;YACL,IAAI,CAACA,IAAIR,SAAS,EAAE,OAAO;YAE3B,MAAMS,iBAAiBD,IAAIE,SAAS;YACpCD,eAAeE,QAAQ,CAACF,eAAeG,QAAQ,KAAKvB;YAEpD,OAAO,IAAIwB,UAAUJ;QACzB,GACCK,GAAG,CAAC,CAACN,MAAQA,IAAIV,EAAE;QAExB,IAAIQ,kBAAkBS,MAAM,GAAG,GAAG;YAC9B,MAAM,IAAI,CAACnB,WAAW,CAACoB,eAAe,CAACV,mBAAmB;QAC9D;IACJ;IAhCAW,YACI,AAAiBxB,YAA0B,EAC3C,AAAiBG,WAAwB,CAC3C;aAFmBH,eAAAA;aACAG,cAAAA;IAClB;AA8BP;AAlCaR;IADZ8B,IAAAA,kBAAU;;;eAG4B,0BAAY,4BAAZ,0BAAY;eACb,wBAAW,4BAAX,wBAAW;;GAHpC9B"}