{"version":3,"sources":["../../../src/walk/guards/auth-dogs.guard.ts"],"sourcesContent":["import { BadRequestException, CanActivate, ExecutionContext, ForbiddenException, Injectable } from '@nestjs/common';\n\nimport { WinstonLoggerService } from '../../common/logger/winstonLogger.service';\nimport { UsersService } from '../../users/users.service';\nimport { isTypedArray } from '../../utils/validator.util';\n\n@Injectable()\nexport class AuthDogsGuard implements CanActivate {\n    constructor(\n        private readonly usersService: UsersService,\n        private readonly logger: WinstonLoggerService,\n    ) {}\n\n    async canActivate(context: ExecutionContext): Promise<boolean> {\n        const request = context.switchToHttp().getRequest();\n        const { userId } = request.user;\n        const dogIds: number[] = this.getDogIds(request);\n\n        await this.checkDogOwnership(userId, dogIds);\n\n        return true;\n    }\n\n    private getDogIds(request: any): number[] {\n        const body = request.body.dogs || request.body;\n\n        if (!isTypedArray(body, 'number')) {\n            const error = new BadRequestException('유효하지 않은 request body: dogIds가 number 타입의 배열이 아닙니다');\n            this.logger.error('유효하지 않은 request body: dogIds가 number 타입의 배열이 아닙니다', {\n                trace: error.stack ?? 'No stack',\n            });\n            throw error;\n        }\n\n        return body;\n    }\n\n    private async checkDogOwnership(userId: number, dogIds: number[]): Promise<void> {\n        const [owned, notFoundDogIds] = await this.usersService.checkDogOwnership(userId, dogIds);\n\n        if (!owned) {\n            const error = new ForbiddenException(\n                `유저 ${userId}은/는 다음 강아지(들)에 대한 접근 권한이 없습니다: ${notFoundDogIds.join(', ')}`,\n            );\n            this.logger.error(\n                `유저 ${userId}은/는 다음 강아지(들)에 대한 접근 권한이 없습니다: ${notFoundDogIds.join(', ')}`,\n                {\n                    trace: error.stack ?? 'No stack',\n                },\n            );\n            throw error;\n        }\n    }\n}\n"],"names":["AuthDogsGuard","canActivate","context","request","switchToHttp","getRequest","userId","user","dogIds","getDogIds","checkDogOwnership","body","dogs","isTypedArray","error","BadRequestException","logger","trace","stack","owned","notFoundDogIds","usersService","ForbiddenException","join","constructor","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAOaA;;;eAAAA;;;wBAPsF;sCAE9D;8BACR;+BACA;;;;;;;;;;AAGtB,IAAA,AAAMA,gBAAN,MAAMA;IAMT,MAAMC,YAAYC,OAAyB,EAAoB;QAC3D,MAAMC,UAAUD,QAAQE,YAAY,GAAGC,UAAU;QACjD,MAAM,EAAEC,MAAM,EAAE,GAAGH,QAAQI,IAAI;QAC/B,MAAMC,SAAmB,IAAI,CAACC,SAAS,CAACN;QAExC,MAAM,IAAI,CAACO,iBAAiB,CAACJ,QAAQE;QAErC,OAAO;IACX;IAEQC,UAAUN,OAAY,EAAY;QACtC,MAAMQ,OAAOR,QAAQQ,IAAI,CAACC,IAAI,IAAIT,QAAQQ,IAAI;QAE9C,IAAI,CAACE,IAAAA,2BAAY,EAACF,MAAM,WAAW;YAC/B,MAAMG,QAAQ,IAAIC,2BAAmB,CAAC;gBAE3BD;YADX,IAAI,CAACE,MAAM,CAACF,KAAK,CAAC,qDAAqD;gBACnEG,OAAOH,CAAAA,eAAAA,MAAMI,KAAK,cAAXJ,0BAAAA,eAAe;YAC1B;YACA,MAAMA;QACV;QAEA,OAAOH;IACX;IAEA,MAAcD,kBAAkBJ,MAAc,EAAEE,MAAgB,EAAiB;QAC7E,MAAM,CAACW,OAAOC,eAAe,GAAG,MAAM,IAAI,CAACC,YAAY,CAACX,iBAAiB,CAACJ,QAAQE;QAElF,IAAI,CAACW,OAAO;YACR,MAAML,QAAQ,IAAIQ,0BAAkB,CAChC,CAAC,GAAG,EAAEhB,OAAO,+BAA+B,EAAEc,eAAeG,IAAI,CAAC,MAAM,CAAC;gBAK9DT;YAHf,IAAI,CAACE,MAAM,CAACF,KAAK,CACb,CAAC,GAAG,EAAER,OAAO,+BAA+B,EAAEc,eAAeG,IAAI,CAAC,MAAM,CAAC,EACzE;gBACIN,OAAOH,CAAAA,eAAAA,MAAMI,KAAK,cAAXJ,0BAAAA,eAAe;YAC1B;YAEJ,MAAMA;QACV;IACJ;IA5CAU,YACI,AAAiBH,YAA0B,EAC3C,AAAiBL,MAA4B,CAC/C;aAFmBK,eAAAA;aACAL,SAAAA;IAClB;AA0CP;AA9CahB;IADZyB,IAAAA,kBAAU;;;eAG4B,0BAAY,4BAAZ,0BAAY;eAClB,0CAAoB,4BAApB,0CAAoB;;GAHxCzB"}