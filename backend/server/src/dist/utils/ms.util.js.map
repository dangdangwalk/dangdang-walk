{"version":3,"sources":["../../src/utils/ms.util.ts"],"sourcesContent":["// Modified from https://github.com/vercel/ms/blob/main/src/index.ts\n\n// Helpers.\nconst s = 1000;\nconst m = s * 60;\nconst h = m * 60;\nconst d = h * 24;\nconst w = d * 7;\nconst y = d * 365.25;\n\ntype Unit =\n    | 'Years'\n    | 'Year'\n    | 'Yrs'\n    | 'Yr'\n    | 'Y'\n    | 'Weeks'\n    | 'Week'\n    | 'W'\n    | 'Days'\n    | 'Day'\n    | 'D'\n    | 'Hours'\n    | 'Hour'\n    | 'Hrs'\n    | 'Hr'\n    | 'H'\n    | 'Minutes'\n    | 'Minute'\n    | 'Mins'\n    | 'Min'\n    | 'M'\n    | 'Seconds'\n    | 'Second'\n    | 'Secs'\n    | 'Sec'\n    | 's'\n    | 'Milliseconds'\n    | 'Millisecond'\n    | 'Msecs'\n    | 'Msec'\n    | 'Ms';\n\ntype UnitAnyCase = Unit | Uppercase<Unit> | Lowercase<Unit>;\n\nexport type StringValue = `${number}` | `${number}${UnitAnyCase}` | `${number} ${UnitAnyCase}`;\n\n/**\n * Parse or format the given value.\n *\n * @param value - The string or number to convert\n * @throws Error if `value` is not a non-empty string or a number\n */\nfunction msFn(value: StringValue): number {\n    try {\n        if (typeof value === 'string') {\n            return parse(value);\n        }\n        throw new Error('인자의 타입이 string 또는 number가 아닙니다');\n    } catch (error) {\n        const message = isError(error)\n            ? `${error.message}. value=${JSON.stringify(value)}`\n            : '알 수 없는 에러가 발생했습니다';\n        throw new Error(message);\n    }\n}\n\n/**\n * Parse the given string and return milliseconds.\n *\n * @param str - A string to parse to milliseconds\n * @returns The parsed value in milliseconds, or `NaN` if the string can't be\n * parsed\n */\nexport function parse(str: string): number {\n    if (typeof str !== 'string' || str.length === 0 || str.length > 100) {\n        throw new Error('Value provided to ms.parse() must be a string with length between 1 and 99.');\n    }\n    const match =\n        /^(?<value>-?(?:\\d+)?\\.?\\d+) *(?<type>milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n            str,\n        );\n    // Named capture groups need to be manually typed today.\n    // https://github.com/microsoft/TypeScript/issues/32098\n    const groups = match?.groups as { value: string; type?: string } | undefined;\n    if (!groups) {\n        return NaN;\n    }\n    const n = parseFloat(groups.value);\n    const type = (groups.type || 'ms').toLowerCase() as Lowercase<Unit>;\n    switch (type) {\n        case 'years':\n        case 'year':\n        case 'yrs':\n        case 'yr':\n        case 'y':\n            return n * y;\n        case 'weeks':\n        case 'week':\n        case 'w':\n            return n * w;\n        case 'days':\n        case 'day':\n        case 'd':\n            return n * d;\n        case 'hours':\n        case 'hour':\n        case 'hrs':\n        case 'hr':\n        case 'h':\n            return n * h;\n        case 'minutes':\n        case 'minute':\n        case 'mins':\n        case 'min':\n        case 'm':\n            return n * m;\n        case 'seconds':\n        case 'second':\n        case 'secs':\n        case 'sec':\n        case 's':\n            return n * s;\n        case 'milliseconds':\n        case 'millisecond':\n        case 'msecs':\n        case 'msec':\n        case 'ms':\n            return n;\n        default:\n            // This should never occur.\n            throw new Error(`The unit ${type as string} was matched, but no matching case exists.`);\n    }\n}\n\nexport default msFn;\n\n/**\n * A type guard for errors.\n *\n * @param value - The value to test\n * @returns A boolean `true` if the provided value is an Error-like object\n */\nfunction isError(value: unknown): value is Error {\n    return typeof value === 'object' && value !== null && 'message' in value;\n}\n"],"names":["parse","s","m","h","d","w","y","msFn","value","Error","error","message","isError","JSON","stringify","str","length","match","exec","groups","NaN","n","parseFloat","type","toLowerCase"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,oEAAoE;AAEpE,WAAW;;;;;;;;;IAqIX,OAAoB;eAApB;;IA7DgBA,KAAK;eAALA;;;AAvEhB,MAAMC,IAAI;AACV,MAAMC,IAAID,IAAI;AACd,MAAME,IAAID,IAAI;AACd,MAAME,IAAID,IAAI;AACd,MAAME,IAAID,IAAI;AACd,MAAME,IAAIF,IAAI;AAuCd;;;;;CAKC,GACD,SAASG,KAAKC,KAAkB;IAC5B,IAAI;QACA,IAAI,OAAOA,UAAU,UAAU;YAC3B,OAAOR,MAAMQ;QACjB;QACA,MAAM,IAAIC,MAAM;IACpB,EAAE,OAAOC,OAAO;QACZ,MAAMC,UAAUC,QAAQF,SAClB,CAAC,EAAEA,MAAMC,OAAO,CAAC,QAAQ,EAAEE,KAAKC,SAAS,CAACN,OAAO,CAAC,GAClD;QACN,MAAM,IAAIC,MAAME;IACpB;AACJ;AASO,SAASX,MAAMe,GAAW;IAC7B,IAAI,OAAOA,QAAQ,YAAYA,IAAIC,MAAM,KAAK,KAAKD,IAAIC,MAAM,GAAG,KAAK;QACjE,MAAM,IAAIP,MAAM;IACpB;IACA,MAAMQ,QACF,iKAAkJC,IAAI,CAClJH;IAER,wDAAwD;IACxD,uDAAuD;IACvD,MAAMI,SAASF,kBAAAA,4BAAAA,MAAOE,MAAM;IAC5B,IAAI,CAACA,QAAQ;QACT,OAAOC;IACX;IACA,MAAMC,IAAIC,WAAWH,OAAOX,KAAK;IACjC,MAAMe,OAAO,AAACJ,CAAAA,OAAOI,IAAI,IAAI,IAAG,EAAGC,WAAW;IAC9C,OAAQD;QACJ,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACD,OAAOF,IAAIf;QACf,KAAK;QACL,KAAK;QACL,KAAK;YACD,OAAOe,IAAIhB;QACf,KAAK;QACL,KAAK;QACL,KAAK;YACD,OAAOgB,IAAIjB;QACf,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACD,OAAOiB,IAAIlB;QACf,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACD,OAAOkB,IAAInB;QACf,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACD,OAAOmB,IAAIpB;QACf,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YACD,OAAOoB;QACX;YACI,2BAA2B;YAC3B,MAAM,IAAIZ,MAAM,CAAC,SAAS,EAAEc,KAAe,0CAA0C,CAAC;IAC9F;AACJ;MAEA,WAAehB;AAEf;;;;;CAKC,GACD,SAASK,QAAQJ,KAAc;IAC3B,OAAO,OAAOA,UAAU,YAAYA,UAAU,QAAQ,aAAaA;AACvE"}