{"version":3,"sources":["../../src/utils/ms.util.spec.ts"],"sourcesContent":["/**\n * Modified from https://github.com/vercel/ms/blob/main/src/parse.test.ts\n */\n\nimport { parse } from './ms.util';\n\ndescribe('parse(string)', () => {\n    it('should not throw an error', () => {\n        expect(() => {\n            parse('1m');\n        }).not.toThrow();\n    });\n\n    it('should preserve ms', () => {\n        expect(parse('100')).toBe(100);\n    });\n\n    it('should convert from m to ms', () => {\n        expect(parse('1m')).toBe(60000);\n    });\n\n    it('should convert from h to ms', () => {\n        expect(parse('1h')).toBe(3600000);\n    });\n\n    it('should convert d to ms', () => {\n        expect(parse('2d')).toBe(172800000);\n    });\n\n    it('should convert w to ms', () => {\n        expect(parse('3w')).toBe(1814400000);\n    });\n\n    it('should convert s to ms', () => {\n        expect(parse('1s')).toBe(1000);\n    });\n\n    it('should convert ms to ms', () => {\n        expect(parse('100ms')).toBe(100);\n    });\n\n    it('should convert y to ms', () => {\n        expect(parse('1y')).toBe(31557600000);\n    });\n\n    it('should work with ms', () => {\n        expect(parse('1.5h')).toBe(5400000);\n    });\n\n    it('should work with multiple spaces', () => {\n        expect(parse('1   s')).toBe(1000);\n    });\n\n    it('should return NaN if invalid', () => {\n        expect(isNaN(parse('â˜ƒ'))).toBe(true);\n        expect(isNaN(parse('10-.5'))).toBe(true);\n        expect(isNaN(parse('foo'))).toBe(true);\n    });\n\n    it('should be case-insensitive', () => {\n        expect(parse('1.5H')).toBe(5400000);\n    });\n\n    it('should work with numbers starting with .', () => {\n        expect(parse('.5ms')).toBe(0.5);\n    });\n\n    it('should work with negative integers', () => {\n        expect(parse('-100ms')).toBe(-100);\n    });\n\n    it('should work with negative decimals', () => {\n        expect(parse('-1.5h')).toBe(-5400000);\n        expect(parse('-10.5h')).toBe(-37800000);\n    });\n\n    it('should work with negative decimals starting with \".\"', () => {\n        expect(parse('-.5h')).toBe(-1800000);\n    });\n});\n\n// long strings\n\ndescribe('parse(long string)', () => {\n    it('should not throw an error', () => {\n        expect(() => {\n            parse('53 milliseconds');\n        }).not.toThrow();\n    });\n\n    it('should convert milliseconds to ms', () => {\n        expect(parse('53 milliseconds')).toBe(53);\n    });\n\n    it('should convert msecs to ms', () => {\n        expect(parse('17 msecs')).toBe(17);\n    });\n\n    it('should convert sec to ms', () => {\n        expect(parse('1 sec')).toBe(1000);\n    });\n\n    it('should convert from min to ms', () => {\n        expect(parse('1 min')).toBe(60000);\n    });\n\n    it('should convert from hr to ms', () => {\n        expect(parse('1 hr')).toBe(3600000);\n    });\n\n    it('should convert days to ms', () => {\n        expect(parse('2 days')).toBe(172800000);\n    });\n\n    it('should convert weeks to ms', () => {\n        expect(parse('1 week')).toBe(604800000);\n    });\n\n    it('should convert years to ms', () => {\n        expect(parse('1 year')).toBe(31557600000);\n    });\n\n    it('should work with decimals', () => {\n        expect(parse('1.5 hours')).toBe(5400000);\n    });\n\n    it('should work with negative integers', () => {\n        expect(parse('-100 milliseconds')).toBe(-100);\n    });\n\n    it('should work with negative decimals', () => {\n        expect(parse('-1.5 hours')).toBe(-5400000);\n    });\n\n    it('should work with negative decimals starting with \".\"', () => {\n        expect(parse('-.5 hr')).toBe(-1800000);\n    });\n});\n\n// invalid inputs\n\ndescribe('parse(invalid inputs)', () => {\n    it('should throw an error, when parse(\"\")', () => {\n        expect(() => {\n            parse('');\n        }).toThrow();\n    });\n\n    it('should throw an error, when parse(undefined)', () => {\n        expect(() => {\n            // @ts-expect-error - We expect this to throw.\n            parse(undefined);\n        }).toThrow();\n    });\n\n    it('should throw an error, when parse(null)', () => {\n        expect(() => {\n            // @ts-expect-error - We expect this to throw.\n            parse(null);\n        }).toThrow();\n    });\n\n    it('should throw an error, when parse([])', () => {\n        expect(() => {\n            // @ts-expect-error - We expect this to throw.\n            parse([]);\n        }).toThrow();\n    });\n\n    it('should throw an error, when parse({})', () => {\n        expect(() => {\n            // @ts-expect-error - We expect this to throw.\n            parse({});\n        }).toThrow();\n    });\n\n    it('should throw an error, when parse(NaN)', () => {\n        expect(() => {\n            // @ts-expect-error - We expect this to throw.\n            parse(NaN);\n        }).toThrow();\n    });\n\n    it('should throw an error, when parse(Infinity)', () => {\n        expect(() => {\n            // @ts-expect-error - We expect this to throw.\n            parse(Infinity);\n        }).toThrow();\n    });\n\n    it('should throw an error, when parse(-Infinity)', () => {\n        expect(() => {\n            // @ts-expect-error - We expect this to throw.\n            parse(-Infinity);\n        }).toThrow();\n    });\n});\n"],"names":["describe","it","expect","parse","not","toThrow","toBe","isNaN","undefined","NaN","Infinity"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}