{"version":3,"sources":["../../../src/common/interceptors/logging.interceptor.ts"],"sourcesContent":["import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';\nimport { Observable, tap } from 'rxjs';\n\nimport { Color, bold, color, italic } from '../../utils/ansi.util';\nimport { generateUuid } from '../../utils/hash.util';\nimport { WinstonLoggerService } from '../logger/winstonLogger.service';\n\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n    constructor(private readonly logger: WinstonLoggerService) {\n        logger = new WinstonLoggerService();\n    }\n\n    intercept(context: ExecutionContext, next: CallHandler<any>): Observable<any> {\n        const request = context.switchToHttp().getRequest();\n        const userInfo = request.user || '';\n\n        let user;\n        if (userInfo.userId) {\n            user = `UserID-${userInfo.userId}`;\n        } else if (userInfo.oauthId) {\n            user = `OAuthID-${userInfo.oauthId}`;\n        } else {\n            user = 'GUEST';\n        }\n\n        const requestId = generateUuid();\n        const { ip, method, path: url } = request;\n\n        if (url === '/metrics') {\n            return next.handle().pipe();\n        }\n\n        this.logger.log(\n            `${color('REQUEST', 'Cyan')}  [ ${bold(method)} | ${bold(url)} | ${ip} | ${italic(user)} ] ${color(requestId, 'Black')}`,\n        );\n\n        const startTime = Date.now();\n        return next.handle().pipe(\n            tap((res) => {\n                const response = context.switchToHttp().getResponse();\n                const { statusCode } = response;\n\n                const endTime = Date.now();\n                const responseTime = endTime - startTime;\n\n                let responseTimeColor: Color = 'Yellow';\n                if (responseTime > 1000) {\n                    responseTimeColor = 'Red';\n                }\n\n                this.logger.log(\n                    `${color('RESPONSE', 'Magenta')} [ ${bold(method)} | ${bold(url)} | ${ip} | ${statusCode} | ${color(`+${responseTime}ms`, responseTimeColor)} ] ${color(requestId, 'Black')}`,\n                );\n\n                this.logger.debug('Response body', typeof res === 'object' ? { ...res } : { res });\n            }),\n        );\n    }\n}\n"],"names":["LoggingInterceptor","intercept","context","next","request","switchToHttp","getRequest","userInfo","user","userId","oauthId","requestId","generateUuid","ip","method","path","url","handle","pipe","logger","log","color","bold","italic","startTime","Date","now","tap","res","response","getResponse","statusCode","endTime","responseTime","responseTimeColor","debug","constructor","WinstonLoggerService","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAQaA;;;eAAAA;;;wBAR8D;sBAC3C;0BAEW;0BACd;sCACQ;;;;;;;;;;AAG9B,IAAA,AAAMA,qBAAN,MAAMA;IAKTC,UAAUC,OAAyB,EAAEC,IAAsB,EAAmB;QAC1E,MAAMC,UAAUF,QAAQG,YAAY,GAAGC,UAAU;QACjD,MAAMC,WAAWH,QAAQI,IAAI,IAAI;QAEjC,IAAIA;QACJ,IAAID,SAASE,MAAM,EAAE;YACjBD,OAAO,CAAC,OAAO,EAAED,SAASE,MAAM,CAAC,CAAC;QACtC,OAAO,IAAIF,SAASG,OAAO,EAAE;YACzBF,OAAO,CAAC,QAAQ,EAAED,SAASG,OAAO,CAAC,CAAC;QACxC,OAAO;YACHF,OAAO;QACX;QAEA,MAAMG,YAAYC,IAAAA,sBAAY;QAC9B,MAAM,EAAEC,EAAE,EAAEC,MAAM,EAAEC,MAAMC,GAAG,EAAE,GAAGZ;QAElC,IAAIY,QAAQ,YAAY;YACpB,OAAOb,KAAKc,MAAM,GAAGC,IAAI;QAC7B;QAEA,IAAI,CAACC,MAAM,CAACC,GAAG,CACX,CAAC,EAAEC,IAAAA,eAAK,EAAC,WAAW,QAAQ,IAAI,EAAEC,IAAAA,cAAI,EAACR,QAAQ,GAAG,EAAEQ,IAAAA,cAAI,EAACN,KAAK,GAAG,EAAEH,GAAG,GAAG,EAAEU,IAAAA,gBAAM,EAACf,MAAM,GAAG,EAAEa,IAAAA,eAAK,EAACV,WAAW,SAAS,CAAC;QAG5H,MAAMa,YAAYC,KAAKC,GAAG;QAC1B,OAAOvB,KAAKc,MAAM,GAAGC,IAAI,CACrBS,IAAAA,SAAG,EAAC,CAACC;YACD,MAAMC,WAAW3B,QAAQG,YAAY,GAAGyB,WAAW;YACnD,MAAM,EAAEC,UAAU,EAAE,GAAGF;YAEvB,MAAMG,UAAUP,KAAKC,GAAG;YACxB,MAAMO,eAAeD,UAAUR;YAE/B,IAAIU,oBAA2B;YAC/B,IAAID,eAAe,MAAM;gBACrBC,oBAAoB;YACxB;YAEA,IAAI,CAACf,MAAM,CAACC,GAAG,CACX,CAAC,EAAEC,IAAAA,eAAK,EAAC,YAAY,WAAW,GAAG,EAAEC,IAAAA,cAAI,EAACR,QAAQ,GAAG,EAAEQ,IAAAA,cAAI,EAACN,KAAK,GAAG,EAAEH,GAAG,GAAG,EAAEkB,WAAW,GAAG,EAAEV,IAAAA,eAAK,EAAC,CAAC,CAAC,EAAEY,aAAa,EAAE,CAAC,EAAEC,mBAAmB,GAAG,EAAEb,IAAAA,eAAK,EAACV,WAAW,SAAS,CAAC;YAGjL,IAAI,CAACQ,MAAM,CAACgB,KAAK,CAAC,iBAAiB,OAAOP,QAAQ,WAAW;gBAAE,GAAGA,GAAG;YAAC,IAAI;gBAAEA;YAAI;QACpF;IAER;IAjDAQ,YAAY,AAAiBjB,MAA4B,CAAE;aAA9BA,SAAAA;QACzBA,SAAS,IAAIkB,0CAAoB;IACrC;AAgDJ;AAnDarC;IADZsC,IAAAA,kBAAU;;;eAE8B,0CAAoB,4BAApB,0CAAoB;;GADhDtC"}