{"version":3,"sources":["../../../src/common/interceptors/prometheus.interceptor.ts"],"sourcesContent":["import { CallHandler, ExecutionContext, Injectable, NestInterceptor, OnModuleInit } from '@nestjs/common';\nimport { Counter, Gauge, Histogram } from 'prom-client';\nimport { Observable, tap } from 'rxjs';\n\n@Injectable()\nexport class PrometheusInterceptor implements NestInterceptor, OnModuleInit {\n    onModuleInit() {\n        this.requestSuccessHistogram.reset();\n        this.requestFailHistogram.reset();\n        this.failureCounter.reset();\n    }\n\n    private readonly requestSuccessHistogram = new Histogram({\n        name: 'nestjs_success_requests',\n        help: 'NestJs success requests - duration in seconds',\n        labelNames: ['handler', 'controller', 'method'],\n        buckets: [0.0001, 0.001, 0.005, 0.01, 0.025, 0.05, 0.075, 0.09, 0.1, 0.25, 0.5, 1, 2.5, 5, 10],\n    });\n\n    private readonly requestFailHistogram = new Histogram({\n        name: 'nestjs_fail_requests',\n        help: 'NestJs fail requests - duration in seconds',\n        labelNames: ['handler', 'controller', 'method'],\n        buckets: [0.0001, 0.001, 0.005, 0.01, 0.025, 0.05, 0.075, 0.09, 0.1, 0.25, 0.5, 1, 2.5, 5, 10],\n    });\n\n    private readonly failureCounter = new Counter({\n        name: 'nestjs_requests_failed_count',\n        help: 'NestJs requests that failed',\n        labelNames: ['handler', 'controller', 'error', 'method'],\n    });\n\n    static registerServiceInfo(serviceInfo: { domain: string; name: string; version: string }): PrometheusInterceptor {\n        new Gauge({\n            name: 'nestjs_info',\n            help: 'NestJs service version info',\n            labelNames: ['domain', 'name', 'version'],\n        }).set(\n            {\n                domain: serviceInfo.domain,\n                name: `${serviceInfo.domain}.${serviceInfo.name}`,\n                version: serviceInfo.version,\n            },\n            1,\n        );\n\n        return new PrometheusInterceptor();\n    }\n\n    private isAvailableMetricsUrl(url: string): boolean {\n        const excludePaths = 'metrics';\n        if (url.includes(excludePaths)) {\n            return false;\n        }\n        return true;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n        const originUrl = context.switchToHttp().getRequest().url.toString();\n\n        const method = context.switchToHttp().getRequest().method.toString();\n        const labels = {\n            controller: context.getClass().name,\n            handler: context.getHandler().name,\n            method: method,\n        };\n\n        try {\n            const requestSuccessTimer = this.requestSuccessHistogram.startTimer(labels);\n            const requestFailTimer = this.requestFailHistogram.startTimer(labels);\n            return next.handle().pipe(\n                tap({\n                    next: () => {\n                        if (this.isAvailableMetricsUrl(originUrl)) {\n                            requestSuccessTimer();\n                        }\n                    },\n                    error: () => {\n                        if (this.isAvailableMetricsUrl(originUrl)) {\n                            requestFailTimer();\n                            this.failureCounter.labels({ ...labels }).inc(1);\n                        }\n                    },\n                }),\n            );\n        } catch (error) {}\n    }\n}\n"],"names":["PrometheusInterceptor","onModuleInit","requestSuccessHistogram","reset","requestFailHistogram","failureCounter","registerServiceInfo","serviceInfo","Gauge","name","help","labelNames","set","domain","version","isAvailableMetricsUrl","url","excludePaths","includes","intercept","context","next","originUrl","switchToHttp","getRequest","toString","method","labels","controller","getClass","handler","getHandler","requestSuccessTimer","startTimer","requestFailTimer","handle","pipe","tap","error","inc","Histogram","buckets","Counter","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAKaA;;;eAAAA;;;wBAL4E;4BAC/C;sBACV;;;;;;;AAGzB,IAAA,AAAMA,wBAAN,MAAMA;IACTC,eAAe;QACX,IAAI,CAACC,uBAAuB,CAACC,KAAK;QAClC,IAAI,CAACC,oBAAoB,CAACD,KAAK;QAC/B,IAAI,CAACE,cAAc,CAACF,KAAK;IAC7B;IAsBA,OAAOG,oBAAoBC,WAA8D,EAAyB;QAC9G,IAAIC,iBAAK,CAAC;YACNC,MAAM;YACNC,MAAM;YACNC,YAAY;gBAAC;gBAAU;gBAAQ;aAAU;QAC7C,GAAGC,GAAG,CACF;YACIC,QAAQN,YAAYM,MAAM;YAC1BJ,MAAM,CAAC,EAAEF,YAAYM,MAAM,CAAC,CAAC,EAAEN,YAAYE,IAAI,CAAC,CAAC;YACjDK,SAASP,YAAYO,OAAO;QAChC,GACA;QAGJ,OAAO,IAAId;IACf;IAEQe,sBAAsBC,GAAW,EAAW;QAChD,MAAMC,eAAe;QACrB,IAAID,IAAIE,QAAQ,CAACD,eAAe;YAC5B,OAAO;QACX;QACA,OAAO;IACX;IAEA,6DAA6D;IAC7D,mBAAmB;IACnBE,UAAUC,OAAyB,EAAEC,IAAiB,EAAmB;QACrE,MAAMC,YAAYF,QAAQG,YAAY,GAAGC,UAAU,GAAGR,GAAG,CAACS,QAAQ;QAElE,MAAMC,SAASN,QAAQG,YAAY,GAAGC,UAAU,GAAGE,MAAM,CAACD,QAAQ;QAClE,MAAME,SAAS;YACXC,YAAYR,QAAQS,QAAQ,GAAGpB,IAAI;YACnCqB,SAASV,QAAQW,UAAU,GAAGtB,IAAI;YAClCiB,QAAQA;QACZ;QAEA,IAAI;YACA,MAAMM,sBAAsB,IAAI,CAAC9B,uBAAuB,CAAC+B,UAAU,CAACN;YACpE,MAAMO,mBAAmB,IAAI,CAAC9B,oBAAoB,CAAC6B,UAAU,CAACN;YAC9D,OAAON,KAAKc,MAAM,GAAGC,IAAI,CACrBC,IAAAA,SAAG,EAAC;gBACAhB,MAAM;oBACF,IAAI,IAAI,CAACN,qBAAqB,CAACO,YAAY;wBACvCU;oBACJ;gBACJ;gBACAM,OAAO;oBACH,IAAI,IAAI,CAACvB,qBAAqB,CAACO,YAAY;wBACvCY;wBACA,IAAI,CAAC7B,cAAc,CAACsB,MAAM,CAAC;4BAAE,GAAGA,MAAM;wBAAC,GAAGY,GAAG,CAAC;oBAClD;gBACJ;YACJ;QAER,EAAE,OAAOD,OAAO,CAAC;IACrB;;aA5EiBpC,0BAA0B,IAAIsC,qBAAS,CAAC;YACrD/B,MAAM;YACNC,MAAM;YACNC,YAAY;gBAAC;gBAAW;gBAAc;aAAS;YAC/C8B,SAAS;gBAAC;gBAAQ;gBAAO;gBAAO;gBAAM;gBAAO;gBAAM;gBAAO;gBAAM;gBAAK;gBAAM;gBAAK;gBAAG;gBAAK;gBAAG;aAAG;QAClG;aAEiBrC,uBAAuB,IAAIoC,qBAAS,CAAC;YAClD/B,MAAM;YACNC,MAAM;YACNC,YAAY;gBAAC;gBAAW;gBAAc;aAAS;YAC/C8B,SAAS;gBAAC;gBAAQ;gBAAO;gBAAO;gBAAM;gBAAO;gBAAM;gBAAO;gBAAM;gBAAK;gBAAM;gBAAK;gBAAG;gBAAK;gBAAG;aAAG;QAClG;aAEiBpC,iBAAiB,IAAIqC,mBAAO,CAAC;YAC1CjC,MAAM;YACNC,MAAM;YACNC,YAAY;gBAAC;gBAAW;gBAAc;gBAAS;aAAS;QAC5D;;AA2DJ;AApFaX;IADZ2C,IAAAA,kBAAU;GACE3C"}