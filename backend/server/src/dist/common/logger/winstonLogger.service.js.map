{"version":3,"sources":["../../../src/common/logger/winstonLogger.service.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nimport { Injectable, LoggerService } from '@nestjs/common';\nimport * as winston from 'winston';\nimport * as winstonDaily from 'winston-daily-rotate-file';\n\nimport stripAnsi from '../../utils/ansi.util';\n\n@Injectable()\nexport class WinstonLoggerService implements LoggerService {\n    private readonly logger: winston.Logger;\n\n    constructor() {\n        const isProduction = process.env.NODE_ENV === 'prod';\n        const isTest = process.env.NODE_ENV === 'test';\n\n        const logDir = path.join(process.cwd(), 'log');\n        if (!isTest && !fs.existsSync(logDir)) {\n            fs.mkdirSync(logDir, { recursive: true });\n        }\n\n        const consoleLogFormat = winston.format.printf(({ timestamp, level, message, ...meta }) => {\n            const seoulTimestamp = new Date(timestamp).toLocaleString('ko-KR');\n            const metaString = Object.keys(meta).length > 0 ? `\\n${JSON.stringify(meta, null, 2)}` : '';\n            return `${seoulTimestamp} | ${level}| ${message}${metaString}`;\n        });\n\n        const consoleFormat = winston.format.combine(\n            winston.format((info) => ({ ...info, level: info.level.toUpperCase().padEnd(7) }))(),\n            winston.format.colorize(),\n            winston.format.prettyPrint(),\n            winston.format.timestamp(),\n            consoleLogFormat,\n        );\n        const consoleTransport = new winston.transports.Console({ format: consoleFormat });\n\n        let transports;\n        if (isTest) {\n            // 최소한의 transport 사용\n            transports = [\n                new winston.transports.Console({\n                    silent: true,\n                }),\n            ];\n        } else {\n            const fileTransport = new winstonDaily({\n                filename: path.join(logDir, '%DATE%.log'),\n                datePattern: 'YYYY-MM-DD',\n                zippedArchive: true,\n                maxSize: '20m',\n                maxFiles: '14d',\n                format: winston.format.combine(\n                    winston.format((info) => ({ ...info, message: stripAnsi(info.message) }))(),\n                    winston.format.timestamp(),\n                    winston.format.json(),\n                ),\n            });\n\n            const errorFileTransport = new winstonDaily({\n                filename: path.join(logDir, '%DATE%.error.log'),\n                datePattern: 'YYYY-MM-DD',\n                zippedArchive: true,\n                maxSize: '20m',\n                maxFiles: '14d',\n                level: 'error',\n                format: winston.format.combine(\n                    winston.format((info) => ({ ...info, message: stripAnsi(info.message) }))(),\n                    winston.format.timestamp(),\n                    winston.format.json(),\n                ),\n            });\n\n            if (isProduction) {\n                transports = [fileTransport, errorFileTransport];\n            } else {\n                transports = [consoleTransport, fileTransport, errorFileTransport];\n            }\n        }\n\n        this.logger = winston.createLogger({\n            level: isProduction ? 'info' : 'debug',\n            format: winston.format.json(),\n            transports,\n        });\n    }\n\n    log(message: string, meta?: any) {\n        this.logger.info(message, meta);\n    }\n\n    error(message: string, meta: any) {\n        this.logger.error(message, meta);\n    }\n\n    warn(message: string, meta?: any) {\n        this.logger.warn(message, meta);\n    }\n\n    debug(message: string, meta?: any) {\n        this.logger.debug(message, meta);\n    }\n}\n"],"names":["WinstonLoggerService","log","message","meta","logger","info","error","warn","debug","constructor","isProduction","process","env","NODE_ENV","isTest","logDir","path","join","cwd","fs","existsSync","mkdirSync","recursive","consoleLogFormat","winston","format","printf","timestamp","level","seoulTimestamp","Date","toLocaleString","metaString","Object","keys","length","JSON","stringify","consoleFormat","combine","toUpperCase","padEnd","colorize","prettyPrint","consoleTransport","transports","Console","silent","fileTransport","winstonDaily","filename","datePattern","zippedArchive","maxSize","maxFiles","stripAnsi","json","errorFileTransport","createLogger","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}