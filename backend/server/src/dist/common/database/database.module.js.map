{"version":3,"sources":["../../../src/common/database/database.module.ts"],"sourcesContent":["import { DynamicModule, Inject, Module } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { TypeOrmModule, getDataSourceToken } from '@nestjs/typeorm';\nimport { EntityClassOrSchema } from '@nestjs/typeorm/dist/interfaces/entity-class-or-schema.type';\nimport { DataSource, FileLogger } from 'typeorm';\nimport { runSeeders } from 'typeorm-extension';\nimport { addTransactionalDataSource, getDataSourceByName } from 'typeorm-transactional';\n\nimport BreedSeeder from './seeds/breed.seeder';\n\nimport { Breed } from '../../breed/breed.entity';\nimport { DogWalkDay } from '../../dog-walk-day/dog-walk-day.entity';\nimport { Dogs } from '../../dogs/dogs.entity';\nimport { Excrements } from '../../excrements/excrements.entity';\nimport { Journals } from '../../journals/journals.entity';\nimport { JournalsDogs } from '../../journals-dogs/journals-dogs.entity';\nimport { TodayWalkTime } from '../../today-walk-time/today-walk-time.entity';\nimport { Users } from '../../users/users.entity';\nimport { UsersDogs } from '../../users-dogs/users-dogs.entity';\nimport { color } from '../../utils/ansi.util';\nimport { WinstonLoggerService } from '../logger/winstonLogger.service';\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            inject: [ConfigService],\n            useFactory: (config: ConfigService) => {\n                const nodeEnv = config.get<string>('NODE_ENV');\n                const enableQueryLogger = config.get<boolean>('ENABLE_QUERY_LOGGER');\n\n                return {\n                    type: 'mysql',\n                    host: config.get<string>('MYSQL_HOST'),\n                    port: config.get<number>('MYSQL_PORT'),\n                    username: config.get<string>('MYSQL_ROOT_USER'),\n                    password: config.get<string>('MYSQL_ROOT_PASSWORD'),\n                    database: config.get<string>('MYSQL_DATABASE'),\n                    entities: [\n                        Breed,\n                        DogWalkDay,\n                        Dogs,\n                        Excrements,\n                        Journals,\n                        JournalsDogs,\n                        TodayWalkTime,\n                        Users,\n                        UsersDogs,\n                    ],\n                    synchronize: true,\n                    timezone: 'Z',\n                    legacySpatialSupport: false,\n                    ...(enableQueryLogger\n                        ? { logger: new FileLogger(true, { logPath: `log/ormlogs.${nodeEnv}.log` }) }\n                        : {}),\n                };\n            },\n            async dataSourceFactory(options) {\n                if (!options) {\n                    throw new Error('옵션이 없습니다');\n                }\n\n                return getDataSourceByName('default') || addTransactionalDataSource(new DataSource(options));\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {\n    constructor(\n        @Inject(getDataSourceToken()) private readonly dataSource: DataSource,\n        private readonly logger: WinstonLoggerService,\n    ) {}\n\n    async onModuleInit() {\n        await runSeeders(this.dataSource, { seeds: [BreedSeeder] });\n        this.logger.log(color('Seed data applied successfully.', 'Yellow'));\n    }\n\n    static forFeature(models: EntityClassOrSchema[]): DynamicModule {\n        return TypeOrmModule.forFeature(models);\n    }\n}\n"],"names":["DatabaseModule","onModuleInit","runSeeders","dataSource","seeds","BreedSeeder","logger","log","color","forFeature","models","TypeOrmModule","constructor","Module","imports","forRootAsync","inject","ConfigService","useFactory","config","nodeEnv","get","enableQueryLogger","type","host","port","username","password","database","entities","Breed","DogWalkDay","Dogs","Excrements","Journals","JournalsDogs","TodayWalkTime","Users","UsersDogs","synchronize","timezone","legacySpatialSupport","FileLogger","logPath","dataSourceFactory","options","Error","getDataSourceByName","addTransactionalDataSource","DataSource","Inject","getDataSourceToken"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAkEaA;;;eAAAA;;;wBAlEiC;wBAChB;yBACoB;0BAEX;kCACZ;sCACqC;6BAExC;6BAEF;kCACK;4BACN;kCACM;gCACF;oCACI;qCACC;6BACR;iCACI;0BACJ;sCACe;;;;;;;;;;;;;;;AA8C9B,IAAA,AAAMA,iBAAN,MAAMA;IAMT,MAAMC,eAAe;QACjB,MAAMC,IAAAA,4BAAU,EAAC,IAAI,CAACC,UAAU,EAAE;YAAEC,OAAO;gBAACC,oBAAW;aAAC;QAAC;QACzD,IAAI,CAACC,MAAM,CAACC,GAAG,CAACC,IAAAA,eAAK,EAAC,mCAAmC;IAC7D;IAEA,OAAOC,WAAWC,MAA6B,EAAiB;QAC5D,OAAOC,sBAAa,CAACF,UAAU,CAACC;IACpC;IAZAE,YACI,AAA+CT,UAAsB,EACrE,AAAiBG,MAA4B,CAC/C;aAFiDH,aAAAA;aAC9BG,SAAAA;IAClB;AAUP;AAdaN;IA5CZa,IAAAA,cAAM,EAAC;QACJC,SAAS;YACLH,sBAAa,CAACI,YAAY,CAAC;gBACvBC,QAAQ;oBAACC,qBAAa;iBAAC;gBACvBC,YAAY,CAACC;oBACT,MAAMC,UAAUD,OAAOE,GAAG,CAAS;oBACnC,MAAMC,oBAAoBH,OAAOE,GAAG,CAAU;oBAE9C,OAAO;wBACHE,MAAM;wBACNC,MAAML,OAAOE,GAAG,CAAS;wBACzBI,MAAMN,OAAOE,GAAG,CAAS;wBACzBK,UAAUP,OAAOE,GAAG,CAAS;wBAC7BM,UAAUR,OAAOE,GAAG,CAAS;wBAC7BO,UAAUT,OAAOE,GAAG,CAAS;wBAC7BQ,UAAU;4BACNC,kBAAK;4BACLC,4BAAU;4BACVC,gBAAI;4BACJC,4BAAU;4BACVC,wBAAQ;4BACRC,gCAAY;4BACZC,kCAAa;4BACbC,kBAAK;4BACLC,0BAAS;yBACZ;wBACDC,aAAa;wBACbC,UAAU;wBACVC,sBAAsB;wBACtB,GAAInB,oBACE;4BAAEhB,QAAQ,IAAIoC,oBAAU,CAAC,MAAM;gCAAEC,SAAS,CAAC,YAAY,EAAEvB,QAAQ,IAAI,CAAC;4BAAC;wBAAG,IAC1E,CAAC,CAAC;oBACZ;gBACJ;gBACA,MAAMwB,mBAAkBC,OAAO;oBAC3B,IAAI,CAACA,SAAS;wBACV,MAAM,IAAIC,MAAM;oBACpB;oBAEA,OAAOC,IAAAA,yCAAmB,EAAC,cAAcC,IAAAA,gDAA0B,EAAC,IAAIC,oBAAU,CAACJ;gBACvF;YACJ;SACH;IACL;IAGSK,aAAAA,IAAAA,cAAM,EAACC,IAAAA,2BAAkB;;;eAAiC,oBAAU,4BAAV,oBAAU;eAC5C,0CAAoB,4BAApB,0CAAoB;;GAHxCnD"}