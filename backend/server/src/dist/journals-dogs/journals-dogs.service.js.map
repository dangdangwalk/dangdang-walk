{"version":3,"sources":["../../src/journals-dogs/journals-dogs.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { FindManyOptions, InsertResult } from 'typeorm';\n\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\n\nimport { JournalsDogs } from './journals-dogs.entity';\nimport { JournalsDogsRepository } from './journals-dogs.repository';\n\n@Injectable()\nexport class JournalsDogsService {\n    constructor(private readonly journalsDogsRepository: JournalsDogsRepository) {}\n\n    private async createIfNotExists(journalId: number, dogId: number): Promise<JournalsDogs> {\n        const newEntity = new JournalsDogs({ journalId, dogId });\n        return await this.journalsDogsRepository.createIfNotExists(newEntity, ['journalId', 'dogId']);\n    }\n\n    async find(where: FindManyOptions<JournalsDogs>): Promise<JournalsDogs[]> {\n        return await this.journalsDogsRepository.find(where);\n    }\n\n    private makeDogData(journalId: number, dogIds: number[]): Partial<JournalsDogs>[] {\n        return dogIds.map((curId) => ({\n            journalId: journalId,\n            dogId: curId,\n        }));\n    }\n\n    async insert(\n        entity: QueryDeepPartialEntity<JournalsDogs> | QueryDeepPartialEntity<JournalsDogs>[],\n    ): Promise<InsertResult> {\n        return await this.journalsDogsRepository.insert(entity);\n    }\n\n    async createJournalDogs(journalId: number, dogIds: number[]) {\n        const journalDogsData: Partial<JournalsDogs>[] = this.makeDogData(journalId, dogIds);\n        return await this.insert(journalDogsData);\n    }\n\n    //TODO: map 안쓰게 select 사용\n    async getDogIdsByJournalId(journalId: number): Promise<number[]> {\n        const findResult = await this.journalsDogsRepository.find({ where: { journalId } });\n\n        return findResult.map((cur) => cur.dogId);\n    }\n}\n"],"names":["JournalsDogsService","createIfNotExists","journalId","dogId","newEntity","JournalsDogs","journalsDogsRepository","find","where","makeDogData","dogIds","map","curId","insert","entity","createJournalDogs","journalDogsData","getDogIdsByJournalId","findResult","cur","constructor","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BASaA;;;eAAAA;;;wBATc;oCAKE;wCACU;;;;;;;;;;AAGhC,IAAA,AAAMA,sBAAN,MAAMA;IAGT,MAAcC,kBAAkBC,SAAiB,EAAEC,KAAa,EAAyB;QACrF,MAAMC,YAAY,IAAIC,gCAAY,CAAC;YAAEH;YAAWC;QAAM;QACtD,OAAO,MAAM,IAAI,CAACG,sBAAsB,CAACL,iBAAiB,CAACG,WAAW;YAAC;YAAa;SAAQ;IAChG;IAEA,MAAMG,KAAKC,KAAoC,EAA2B;QACtE,OAAO,MAAM,IAAI,CAACF,sBAAsB,CAACC,IAAI,CAACC;IAClD;IAEQC,YAAYP,SAAiB,EAAEQ,MAAgB,EAA2B;QAC9E,OAAOA,OAAOC,GAAG,CAAC,CAACC,QAAW,CAAA;gBAC1BV,WAAWA;gBACXC,OAAOS;YACX,CAAA;IACJ;IAEA,MAAMC,OACFC,MAAqF,EAChE;QACrB,OAAO,MAAM,IAAI,CAACR,sBAAsB,CAACO,MAAM,CAACC;IACpD;IAEA,MAAMC,kBAAkBb,SAAiB,EAAEQ,MAAgB,EAAE;QACzD,MAAMM,kBAA2C,IAAI,CAACP,WAAW,CAACP,WAAWQ;QAC7E,OAAO,MAAM,IAAI,CAACG,MAAM,CAACG;IAC7B;IAEA,yBAAyB;IACzB,MAAMC,qBAAqBf,SAAiB,EAAqB;QAC7D,MAAMgB,aAAa,MAAM,IAAI,CAACZ,sBAAsB,CAACC,IAAI,CAAC;YAAEC,OAAO;gBAAEN;YAAU;QAAE;QAEjF,OAAOgB,WAAWP,GAAG,CAAC,CAACQ,MAAQA,IAAIhB,KAAK;IAC5C;IAlCAiB,YAAY,AAAiBd,sBAA8C,CAAE;aAAhDA,yBAAAA;IAAiD;AAmClF;AApCaN;IADZqB,IAAAA,kBAAU;;;eAE8C,8CAAsB,4BAAtB,8CAAsB;;GADlErB"}