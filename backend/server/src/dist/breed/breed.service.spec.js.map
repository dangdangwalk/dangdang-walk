{"version":3,"sources":["../../src/breed/breed.service.spec.ts"],"sourcesContent":["import { NotFoundException } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\n\nimport { getRepositoryToken } from '@nestjs/typeorm';\n\nimport { EntityManager, Repository } from 'typeorm';\n\nimport { Breed } from './breed.entity';\nimport { BreedRepository } from './breed.repository';\nimport { BreedService } from './breed.service';\n\nimport { mockBreed } from '../fixtures/breed.fixture';\n\ndescribe('BreedService', () => {\n    let service: BreedService;\n    let breedRepository: Repository<Breed>;\n\n    beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n            providers: [\n                BreedService,\n                BreedRepository,\n                EntityManager,\n                {\n                    provide: getRepositoryToken(Breed),\n                    useClass: Repository,\n                },\n            ],\n        }).compile();\n\n        service = module.get<BreedService>(BreedService);\n        breedRepository = module.get<Repository<Breed>>(getRepositoryToken(Breed));\n    });\n\n    describe('findOne', () => {\n        context('견종 조회 할 때', () => {\n            beforeEach(() => {\n                jest.spyOn(breedRepository, 'findOne').mockResolvedValue(mockBreed);\n            });\n\n            it('견종 정보를 반환해야 한다.', async () => {\n                const breed = await service.findOne({ where: { id: 1 } });\n\n                expect(breed).toEqual({\n                    id: 1,\n                    englishName: 'Poodle',\n                    koreanName: '푸들',\n                    recommendedWalkAmount: 60,\n                });\n            });\n        });\n    });\n\n    describe('getKoreanNames', () => {\n        context('견종의 한국어 이름을 조회할 때', () => {\n            const mockBreedList = [\n                {\n                    englishName: 'Poodle',\n                    id: 1,\n                    koreanName: '푸들',\n                    recommendedWalkAmount: 60,\n                },\n                {\n                    englishName: 'Airedale Terrier',\n                    id: 2,\n                    koreanName: '에어데일 테리어',\n                    recommendedWalkAmount: 1800,\n                },\n            ];\n\n            beforeEach(() => {\n                jest.spyOn(breedRepository, 'find').mockResolvedValue(mockBreedList);\n            });\n\n            it('견종의 한국어 이름 리스트를 반환한다.', async () => {\n                const breed = await service.getKoreanNames();\n\n                expect(breed).toEqual(['푸들', '에어데일 테리어']);\n            });\n        });\n\n        context('견종 목록이 존재하지 않으면', () => {\n            beforeEach(() => {\n                jest.spyOn(breedRepository, 'find').mockResolvedValue([]);\n            });\n\n            it('NotFoundException 예외를 던져야 한다.', async () => {\n                await expect(service.getKoreanNames()).rejects.toThrow(\n                    new NotFoundException('견종 목록을 찾을 수 없습니다.'),\n                );\n            });\n        });\n    });\n\n    describe('getRecommendedWalkAmountList', () => {\n        const mockBreedList = [\n            {\n                englishName: 'Poodle',\n                id: 1,\n                koreanName: '푸들',\n                recommendedWalkAmount: 60,\n            },\n            {\n                englishName: 'Airedale Terrier',\n                id: 2,\n                koreanName: '에어데일 테리어',\n                recommendedWalkAmount: 1800,\n            },\n        ];\n\n        const breedIds = [1, 2];\n        const not_exist_BreedIds = [999, 1000];\n\n        beforeEach(() => {\n            jest.spyOn(breedRepository, 'find').mockResolvedValue(mockBreedList);\n        });\n\n        context('견종 id가 주어지면', () => {\n            it('해당 견종의 권장 산책량 리스트를 반환해야 한다.', async () => {\n                const recommendWalk = await service.getRecommendedWalkAmountList(breedIds);\n\n                expect(recommendWalk).toEqual([60, 1800]);\n            });\n        });\n\n        context('견종 id가 존재하지 않으면', () => {\n            it('NotFoundException 예외를 던져야 한다.', async () => {\n                await expect(service.getRecommendedWalkAmountList(not_exist_BreedIds)).rejects.toThrow(\n                    new NotFoundException('999에 대한 권장 산책량을 찾을 수 없습니다.'),\n                );\n            });\n        });\n\n        context('견종 목록이 빈 값이면', () => {\n            beforeEach(() => {\n                jest.spyOn(breedRepository, 'find').mockResolvedValue([]);\n            });\n            it('NotFoundException 예외를 던져야 한다.', async () => {\n                await expect(service.getRecommendedWalkAmountList(not_exist_BreedIds)).rejects.toThrow(\n                    new NotFoundException('999,1000 해당 견종을 찾을 수 없습니다.'),\n                );\n            });\n        });\n    });\n});\n"],"names":["describe","service","breedRepository","beforeEach","module","Test","createTestingModule","providers","BreedService","BreedRepository","EntityManager","provide","getRepositoryToken","Breed","useClass","Repository","compile","get","context","jest","spyOn","mockResolvedValue","mockBreed","it","breed","findOne","where","id","expect","toEqual","englishName","koreanName","recommendedWalkAmount","mockBreedList","getKoreanNames","rejects","toThrow","NotFoundException","breedIds","not_exist_BreedIds","recommendWalk","getRecommendedWalkAmountList"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}