{"version":3,"sources":["../../src/breed/breed.service.ts"],"sourcesContent":["import { Injectable, NotFoundException } from '@nestjs/common';\nimport { FindOneOptions, In } from 'typeorm';\n\nimport { Breed } from './breed.entity';\nimport { BreedRepository } from './breed.repository';\n\n@Injectable()\nexport class BreedService {\n    constructor(private readonly breedRepository: BreedRepository) {}\n\n    async findOne(where: FindOneOptions<Breed>): Promise<Breed> {\n        return this.breedRepository.findOne(where);\n    }\n\n    async getKoreanNames(): Promise<string[]> {\n        const breeds = await this.breedRepository.find({ select: ['koreanName'] });\n\n        if (!breeds.length) {\n            throw new NotFoundException(`견종 목록을 찾을 수 없습니다.`);\n        }\n\n        return breeds.map((breed) => breed.koreanName);\n    }\n\n    async getRecommendedWalkAmountList(breedIds: number[]): Promise<number[]> {\n        const breeds = await this.breedRepository.find({\n            where: { id: In(breedIds) },\n            select: ['id', 'recommendedWalkAmount'],\n        });\n\n        if (!breeds.length) {\n            throw new NotFoundException(`${breedIds} 해당 견종을 찾을 수 없습니다.`);\n        }\n\n        const breedMap = new Map(breeds.map((breed: Breed) => [breed.id, breed.recommendedWalkAmount]));\n\n        return breedIds.map((breedId: number) => {\n            const recommendedWalkAmount = breedMap.get(breedId);\n\n            if (!recommendedWalkAmount) {\n                throw new NotFoundException(`${breedId}에 대한 권장 산책량을 찾을 수 없습니다.`);\n            }\n\n            return recommendedWalkAmount;\n        });\n    }\n}\n"],"names":["BreedService","findOne","where","breedRepository","getKoreanNames","breeds","find","select","length","NotFoundException","map","breed","koreanName","getRecommendedWalkAmountList","breedIds","id","In","breedMap","Map","recommendedWalkAmount","breedId","get","constructor","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAOaA;;;eAAAA;;;wBAPiC;yBACX;iCAGH;;;;;;;;;;AAGzB,IAAA,AAAMA,eAAN,MAAMA;IAGT,MAAMC,QAAQC,KAA4B,EAAkB;QACxD,OAAO,IAAI,CAACC,eAAe,CAACF,OAAO,CAACC;IACxC;IAEA,MAAME,iBAAoC;QACtC,MAAMC,SAAS,MAAM,IAAI,CAACF,eAAe,CAACG,IAAI,CAAC;YAAEC,QAAQ;gBAAC;aAAa;QAAC;QAExE,IAAI,CAACF,OAAOG,MAAM,EAAE;YAChB,MAAM,IAAIC,yBAAiB,CAAC,CAAC,iBAAiB,CAAC;QACnD;QAEA,OAAOJ,OAAOK,GAAG,CAAC,CAACC,QAAUA,MAAMC,UAAU;IACjD;IAEA,MAAMC,6BAA6BC,QAAkB,EAAqB;QACtE,MAAMT,SAAS,MAAM,IAAI,CAACF,eAAe,CAACG,IAAI,CAAC;YAC3CJ,OAAO;gBAAEa,IAAIC,IAAAA,WAAE,EAACF;YAAU;YAC1BP,QAAQ;gBAAC;gBAAM;aAAwB;QAC3C;QAEA,IAAI,CAACF,OAAOG,MAAM,EAAE;YAChB,MAAM,IAAIC,yBAAiB,CAAC,CAAC,EAAEK,SAAS,kBAAkB,CAAC;QAC/D;QAEA,MAAMG,WAAW,IAAIC,IAAIb,OAAOK,GAAG,CAAC,CAACC,QAAiB;gBAACA,MAAMI,EAAE;gBAAEJ,MAAMQ,qBAAqB;aAAC;QAE7F,OAAOL,SAASJ,GAAG,CAAC,CAACU;YACjB,MAAMD,wBAAwBF,SAASI,GAAG,CAACD;YAE3C,IAAI,CAACD,uBAAuB;gBACxB,MAAM,IAAIV,yBAAiB,CAAC,CAAC,EAAEW,QAAQ,uBAAuB,CAAC;YACnE;YAEA,OAAOD;QACX;IACJ;IArCAG,YAAY,AAAiBnB,eAAgC,CAAE;aAAlCA,kBAAAA;IAAmC;AAsCpE;AAvCaH;IADZuB,IAAAA,kBAAU;;;eAEuC,gCAAe,4BAAf,gCAAe;;GADpDvB"}