{"version":3,"sources":["../../src/users/users.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { FindOneOptions, FindOptionsWhere } from 'typeorm';\nimport { QueryDeepPartialEntity } from 'typeorm/query-builder/QueryPartialEntity';\n\nimport { CreateUser } from './types/create-user.type';\nimport { ROLE } from './types/role.type';\nimport { UpdateUser } from './types/update-user.type';\nimport { UserProfile } from './types/user-profile.type';\nimport { Users } from './users.entity';\nimport { UsersRepository } from './users.repository';\n\nimport { AccessTokenPayload } from '../auth/token/token.service';\nimport { S3Service } from '../s3/s3.service';\nimport { UsersDogsService } from '../users-dogs/users-dogs.service';\nimport { generateUuid } from '../utils/hash.util';\nimport { checkIfExistsInArr } from '../utils/manipulate.util';\n\n@Injectable()\nexport class UsersService {\n    constructor(\n        private readonly usersRepository: UsersRepository,\n        private readonly usersDogsService: UsersDogsService,\n        private readonly s3Service: S3Service,\n    ) {}\n\n    async findOne(where: FindOneOptions<Users>) {\n        return await this.usersRepository.findOne(where);\n    }\n\n    async update(where: FindOptionsWhere<Users>, partialEntity: QueryDeepPartialEntity<Users>) {\n        return await this.usersRepository.update(where, partialEntity);\n    }\n\n    async updateAndFindOne(where: FindOptionsWhere<Users>, partialEntity: QueryDeepPartialEntity<Users>) {\n        return await this.usersRepository.updateAndFindOne(where, partialEntity);\n    }\n\n    async delete(userId: number) {\n        await this.usersRepository.delete({ id: userId });\n        await this.s3Service.deleteObjectFolder(userId);\n    }\n\n    async createIfNotExists({ oauthNickname, ...otherAttributes }: CreateUser) {\n        const nickname = await this.generateUniqueNickname(oauthNickname);\n\n        return await this.usersRepository.createIfNotExists(\n            new Users({\n                nickname,\n                role: ROLE.User,\n                mainDogId: null,\n                ...otherAttributes,\n            }),\n            'oauthId',\n        );\n    }\n\n    private async generateUniqueNickname(nickname: string): Promise<string> {\n        let randomId = generateUuid().slice(0, 10);\n        let user = await this.usersRepository.findOneWithNoException({ nickname: `${nickname}#${randomId}` });\n\n        while (user) {\n            randomId = generateUuid().slice(0, 10);\n            user = await this.usersRepository.findOneWithNoException({ nickname: `${nickname}#${randomId}` });\n        }\n\n        return `${nickname}#${randomId}`;\n    }\n\n    async getOwnDogsList(userId: number): Promise<number[]> {\n        return (await this.usersDogsService.find({ where: { userId }, select: ['dogId'] })).map((cur) => cur.dogId);\n    }\n\n    async checkDogOwnership(userId: number, dogId: number | number[]): Promise<[boolean, number[]]> {\n        const myDogIds = (await this.usersDogsService.find({ where: { userId }, select: ['dogId'] })).map(\n            (cur) => cur.dogId,\n        );\n\n        return checkIfExistsInArr(myDogIds, dogId);\n    }\n\n    async getUserProfile({ userId, provider }: AccessTokenPayload): Promise<UserProfile> {\n        const { nickname, email, profileImageUrl } = await this.usersRepository.findOne({\n            where: { id: userId },\n            select: ['nickname', 'email', 'profileImageUrl'],\n        });\n\n        return { nickname, email, profileImageUrl, provider };\n    }\n\n    async updateUserProfile(userId: number, userInfo: UpdateUser) {\n        const { nickname, profileImageUrl } = userInfo;\n\n        if (nickname) {\n            const nickname = await this.generateUniqueNickname(userInfo.nickname);\n            userInfo.nickname = nickname;\n        }\n\n        if (profileImageUrl) {\n            const curUserInfo = await this.usersRepository.findOne({ where: { id: userId } });\n            if (curUserInfo && curUserInfo.profileImageUrl) {\n                await this.s3Service.deleteSingleObject(userId, curUserInfo.profileImageUrl);\n            }\n        }\n\n        await this.usersRepository.update({ id: userId }, userInfo);\n    }\n}\n"],"names":["UsersService","findOne","where","usersRepository","update","partialEntity","updateAndFindOne","delete","userId","id","s3Service","deleteObjectFolder","createIfNotExists","oauthNickname","otherAttributes","nickname","generateUniqueNickname","Users","role","ROLE","User","mainDogId","randomId","generateUuid","slice","user","findOneWithNoException","getOwnDogsList","usersDogsService","find","select","map","cur","dogId","checkDogOwnership","myDogIds","checkIfExistsInArr","getUserProfile","provider","email","profileImageUrl","updateUserProfile","userInfo","curUserInfo","deleteSingleObject","constructor","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}