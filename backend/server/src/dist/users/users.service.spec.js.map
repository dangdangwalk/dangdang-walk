{"version":3,"sources":["../../src/users/users.service.spec.ts"],"sourcesContent":["import { ConflictException, NotFoundException } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { EntityManager, Repository, UpdateResult } from 'typeorm';\n\nimport { Users } from './users.entity';\n\nimport { UsersRepository } from './users.repository';\n\nimport { UsersService } from './users.service';\n\nimport { WinstonLoggerService } from '../common/logger/winstonLogger.service';\nimport { mockUser } from '../fixtures/users.fixture';\nimport { S3Service } from '../s3/s3.service';\nimport { UsersDogs } from '../users-dogs/users-dogs.entity';\nimport { UsersDogsRepository } from '../users-dogs/users-dogs.repository';\nimport { UsersDogsService } from '../users-dogs/users-dogs.service';\n\ndescribe('UsersService', () => {\n    let service: UsersService;\n    let userRepository: Repository<Users>;\n\n    beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n            providers: [\n                UsersService,\n                UsersRepository,\n                UsersDogsService,\n                UsersDogsRepository,\n                EntityManager,\n                {\n                    provide: S3Service,\n                    useValue: { deleteSingleObject: jest.fn() },\n                },\n                {\n                    provide: getRepositoryToken(Users),\n                    useClass: Repository,\n                },\n                {\n                    provide: getRepositoryToken(UsersDogs),\n                    useClass: Repository,\n                },\n                {\n                    provide: WinstonLoggerService,\n                    useValue: {},\n                },\n            ],\n        }).compile();\n\n        service = module.get<UsersService>(UsersService);\n        userRepository = module.get<Repository<Users>>(getRepositoryToken(Users));\n    });\n\n    describe('findOne', () => {\n        context('사용자가 존재 할 때', () => {\n            beforeEach(() => {\n                jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser);\n            });\n\n            it('사용자 정보를 반환해야 한다.', async () => {\n                const res = await service.findOne({ where: { id: mockUser.id } });\n\n                expect(res).toEqual(mockUser);\n            });\n        });\n\n        context('사용자가 존재하지 않을 때', () => {\n            beforeEach(() => {\n                jest.spyOn(userRepository, 'findOne').mockResolvedValue(null);\n            });\n\n            it('NotFoundException 예외를 던져야 한다.', async () => {\n                await expect(service.findOne({ where: { id: 1 } })).rejects.toThrow(NotFoundException);\n            });\n        });\n    });\n\n    describe('updateAndFindOne', () => {\n        context('사용자 토큰 정보가 주어지고 사용자가 존재하면', () => {\n            beforeEach(() => {\n                jest.spyOn(userRepository, 'findOne').mockResolvedValue(mockUser);\n                jest.spyOn(userRepository, 'update').mockResolvedValue({ affected: 1 } as UpdateResult);\n            });\n\n            it('사용자 정보를 업데이트하고 사용자를 반환해야 한다.', async () => {\n                const res = await service.updateAndFindOne(\n                    { oauthId: mockUser.oauthId },\n                    {\n                        oauthAccessToken: mockUser.oauthAccessToken,\n                        oauthRefreshToken: mockUser.oauthRefreshToken,\n                        refreshToken: mockUser.refreshToken,\n                    },\n                );\n\n                expect(res).toBe(mockUser);\n                expect(userRepository.findOne).toHaveBeenCalledWith({ where: { oauthId: mockUser.oauthId } });\n                expect(userRepository.update).toHaveBeenCalledWith(\n                    { oauthId: mockUser.oauthId },\n                    {\n                        oauthAccessToken: mockUser.oauthAccessToken,\n                        oauthRefreshToken: mockUser.oauthRefreshToken,\n                        refreshToken: mockUser.refreshToken,\n                    },\n                );\n            });\n        });\n\n        context('사용자 토큰 정보가 주어지고 사용자가 존재하지 않으면', () => {\n            beforeEach(() => {\n                jest.spyOn(userRepository, 'update').mockResolvedValue({ affected: 0 } as UpdateResult);\n            });\n\n            it('NotFoundException 예외를 던져야 한다.', async () => {\n                await expect(\n                    service.updateAndFindOne(\n                        { oauthId: mockUser.oauthId },\n                        {\n                            oauthAccessToken: mockUser.oauthAccessToken,\n                            oauthRefreshToken: mockUser.oauthRefreshToken,\n                            refreshToken: mockUser.refreshToken,\n                        },\n                    ),\n                ).rejects.toThrow(NotFoundException);\n            });\n        });\n    });\n\n    describe('createIfNotExists', () => {\n        context('사용자 토큰 정보가 주어지고 사용자가 존재하면', () => {\n            beforeEach(() => {\n                jest.spyOn(userRepository, 'findOne').mockResolvedValueOnce(null).mockResolvedValueOnce(mockUser);\n            });\n\n            it('ConflictException 예외를 던져야 한다.', async () => {\n                await expect(\n                    service.createIfNotExists({\n                        oauthNickname: 'modifyTest',\n                        email: 'test@mail.com',\n                        profileImageUrl: 'test.jpg',\n                        oauthId: mockUser.oauthId,\n                        oauthAccessToken: mockUser.oauthAccessToken,\n                        oauthRefreshToken: mockUser.oauthRefreshToken,\n                        refreshToken: mockUser.refreshToken,\n                    }),\n                ).rejects.toThrow(ConflictException);\n            });\n        });\n    });\n});\n"],"names":["describe","service","userRepository","beforeEach","module","Test","createTestingModule","providers","UsersService","UsersRepository","UsersDogsService","UsersDogsRepository","EntityManager","provide","S3Service","useValue","deleteSingleObject","jest","fn","getRepositoryToken","Users","useClass","Repository","UsersDogs","WinstonLoggerService","compile","get","context","spyOn","mockResolvedValue","mockUser","it","res","findOne","where","id","expect","toEqual","rejects","toThrow","NotFoundException","affected","updateAndFindOne","oauthId","oauthAccessToken","oauthRefreshToken","refreshToken","toBe","toHaveBeenCalledWith","update","mockResolvedValueOnce","createIfNotExists","oauthNickname","email","profileImageUrl","ConflictException"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";wBAAqD;yBACjB;yBACD;0BACqB;6BAElC;iCAEU;8BAEH;sCAEQ;8BACZ;2BACC;iCACA;qCACU;kCACH;AAEjCA,SAAS,gBAAgB;IACrB,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACP,MAAMC,SAAwB,MAAMC,aAAI,CAACC,mBAAmB,CAAC;YACzDC,WAAW;gBACPC,0BAAY;gBACZC,gCAAe;gBACfC,kCAAgB;gBAChBC,wCAAmB;gBACnBC,uBAAa;gBACb;oBACIC,SAASC,oBAAS;oBAClBC,UAAU;wBAAEC,oBAAoBC,KAAKC,EAAE;oBAAG;gBAC9C;gBACA;oBACIL,SAASM,IAAAA,2BAAkB,EAACC,kBAAK;oBACjCC,UAAUC,oBAAU;gBACxB;gBACA;oBACIT,SAASM,IAAAA,2BAAkB,EAACI,0BAAS;oBACrCF,UAAUC,oBAAU;gBACxB;gBACA;oBACIT,SAASW,0CAAoB;oBAC7BT,UAAU,CAAC;gBACf;aACH;QACL,GAAGU,OAAO;QAEVxB,UAAUG,OAAOsB,GAAG,CAAelB,0BAAY;QAC/CN,iBAAiBE,OAAOsB,GAAG,CAAoBP,IAAAA,2BAAkB,EAACC,kBAAK;IAC3E;IAEApB,SAAS,WAAW;QAChB2B,QAAQ,eAAe;YACnBxB,WAAW;gBACPc,KAAKW,KAAK,CAAC1B,gBAAgB,WAAW2B,iBAAiB,CAACC,sBAAQ;YACpE;YAEAC,GAAG,oBAAoB;gBACnB,MAAMC,MAAM,MAAM/B,QAAQgC,OAAO,CAAC;oBAAEC,OAAO;wBAAEC,IAAIL,sBAAQ,CAACK,EAAE;oBAAC;gBAAE;gBAE/DC,OAAOJ,KAAKK,OAAO,CAACP,sBAAQ;YAChC;QACJ;QAEAH,QAAQ,kBAAkB;YACtBxB,WAAW;gBACPc,KAAKW,KAAK,CAAC1B,gBAAgB,WAAW2B,iBAAiB,CAAC;YAC5D;YAEAE,GAAG,iCAAiC;gBAChC,MAAMK,OAAOnC,QAAQgC,OAAO,CAAC;oBAAEC,OAAO;wBAAEC,IAAI;oBAAE;gBAAE,IAAIG,OAAO,CAACC,OAAO,CAACC,yBAAiB;YACzF;QACJ;IACJ;IAEAxC,SAAS,oBAAoB;QACzB2B,QAAQ,6BAA6B;YACjCxB,WAAW;gBACPc,KAAKW,KAAK,CAAC1B,gBAAgB,WAAW2B,iBAAiB,CAACC,sBAAQ;gBAChEb,KAAKW,KAAK,CAAC1B,gBAAgB,UAAU2B,iBAAiB,CAAC;oBAAEY,UAAU;gBAAE;YACzE;YAEAV,GAAG,gCAAgC;gBAC/B,MAAMC,MAAM,MAAM/B,QAAQyC,gBAAgB,CACtC;oBAAEC,SAASb,sBAAQ,CAACa,OAAO;gBAAC,GAC5B;oBACIC,kBAAkBd,sBAAQ,CAACc,gBAAgB;oBAC3CC,mBAAmBf,sBAAQ,CAACe,iBAAiB;oBAC7CC,cAAchB,sBAAQ,CAACgB,YAAY;gBACvC;gBAGJV,OAAOJ,KAAKe,IAAI,CAACjB,sBAAQ;gBACzBM,OAAOlC,eAAe+B,OAAO,EAAEe,oBAAoB,CAAC;oBAAEd,OAAO;wBAAES,SAASb,sBAAQ,CAACa,OAAO;oBAAC;gBAAE;gBAC3FP,OAAOlC,eAAe+C,MAAM,EAAED,oBAAoB,CAC9C;oBAAEL,SAASb,sBAAQ,CAACa,OAAO;gBAAC,GAC5B;oBACIC,kBAAkBd,sBAAQ,CAACc,gBAAgB;oBAC3CC,mBAAmBf,sBAAQ,CAACe,iBAAiB;oBAC7CC,cAAchB,sBAAQ,CAACgB,YAAY;gBACvC;YAER;QACJ;QAEAnB,QAAQ,iCAAiC;YACrCxB,WAAW;gBACPc,KAAKW,KAAK,CAAC1B,gBAAgB,UAAU2B,iBAAiB,CAAC;oBAAEY,UAAU;gBAAE;YACzE;YAEAV,GAAG,iCAAiC;gBAChC,MAAMK,OACFnC,QAAQyC,gBAAgB,CACpB;oBAAEC,SAASb,sBAAQ,CAACa,OAAO;gBAAC,GAC5B;oBACIC,kBAAkBd,sBAAQ,CAACc,gBAAgB;oBAC3CC,mBAAmBf,sBAAQ,CAACe,iBAAiB;oBAC7CC,cAAchB,sBAAQ,CAACgB,YAAY;gBACvC,IAENR,OAAO,CAACC,OAAO,CAACC,yBAAiB;YACvC;QACJ;IACJ;IAEAxC,SAAS,qBAAqB;QAC1B2B,QAAQ,6BAA6B;YACjCxB,WAAW;gBACPc,KAAKW,KAAK,CAAC1B,gBAAgB,WAAWgD,qBAAqB,CAAC,MAAMA,qBAAqB,CAACpB,sBAAQ;YACpG;YAEAC,GAAG,iCAAiC;gBAChC,MAAMK,OACFnC,QAAQkD,iBAAiB,CAAC;oBACtBC,eAAe;oBACfC,OAAO;oBACPC,iBAAiB;oBACjBX,SAASb,sBAAQ,CAACa,OAAO;oBACzBC,kBAAkBd,sBAAQ,CAACc,gBAAgB;oBAC3CC,mBAAmBf,sBAAQ,CAACe,iBAAiB;oBAC7CC,cAAchB,sBAAQ,CAACgB,YAAY;gBACvC,IACFR,OAAO,CAACC,OAAO,CAACgB,yBAAiB;YACvC;QACJ;IACJ;AACJ"}