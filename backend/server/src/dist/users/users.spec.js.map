{"version":3,"sources":["../../src/users/users.spec.ts"],"sourcesContent":["import { ROLE } from './types/role.type';\n\nimport { Users } from './users.entity';\n\nimport { OAUTH_ACCESS_TOKEN, OAUTH_REFRESH_TOKEN, VALID_REFRESH_TOKEN_100_YEARS } from '../../test/constants';\nimport { mockUser } from '../fixtures/users.fixture';\n\ndescribe('User', () => {\n    it('user 정보가 주어지면 user 정보를 반환해야 한다.', () => {\n        expect(mockUser).toEqual({\n            id: 1,\n            nickname: 'mock_oauth_nickname#12345',\n            email: 'mock_email@example.com',\n            profileImageUrl: 'mock_profile_image.jpg',\n            role: ROLE.User,\n            mainDogId: null,\n            oauthId: '12345',\n            oauthAccessToken: OAUTH_ACCESS_TOKEN,\n            oauthRefreshToken: OAUTH_REFRESH_TOKEN,\n            refreshToken: VALID_REFRESH_TOKEN_100_YEARS,\n            createdAt: expect.any(Date),\n        });\n    });\n\n    it('user 정보가 없으면 빈 객체를 반환해야 한다.', () => {\n        const user = new Users({});\n\n        expect(user).toEqual({});\n    });\n});\n"],"names":["describe","it","expect","mockUser","toEqual","id","nickname","email","profileImageUrl","role","ROLE","User","mainDogId","oauthId","oauthAccessToken","OAUTH_ACCESS_TOKEN","oauthRefreshToken","OAUTH_REFRESH_TOKEN","refreshToken","VALID_REFRESH_TOKEN_100_YEARS","createdAt","any","Date","user","Users"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";0BAAqB;6BAEC;2BAEiE;8BAC9D;AAEzBA,SAAS,QAAQ;IACbC,GAAG,mCAAmC;QAClCC,OAAOC,sBAAQ,EAAEC,OAAO,CAAC;YACrBC,IAAI;YACJC,UAAU;YACVC,OAAO;YACPC,iBAAiB;YACjBC,MAAMC,cAAI,CAACC,IAAI;YACfC,WAAW;YACXC,SAAS;YACTC,kBAAkBC,6BAAkB;YACpCC,mBAAmBC,8BAAmB;YACtCC,cAAcC,wCAA6B;YAC3CC,WAAWlB,OAAOmB,GAAG,CAACC;QAC1B;IACJ;IAEArB,GAAG,+BAA+B;QAC9B,MAAMsB,OAAO,IAAIC,kBAAK,CAAC,CAAC;QAExBtB,OAAOqB,MAAMnB,OAAO,CAAC,CAAC;IAC1B;AACJ"}