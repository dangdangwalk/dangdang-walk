{"version":3,"sources":["../../../src/auth/guards/refresh-token.guard.ts"],"sourcesContent":["import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JsonWebTokenError, TokenExpiredError } from '@nestjs/jwt';\n\nimport { WinstonLoggerService } from '../../common/logger/winstonLogger.service';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class RefreshTokenGuard implements CanActivate {\n    constructor(\n        private authService: AuthService,\n        private logger: WinstonLoggerService,\n    ) {}\n\n    async canActivate(context: ExecutionContext): Promise<boolean> {\n        const request = context.switchToHttp().getRequest();\n        const token = this.extractRefreshTokenFromCookie(request);\n\n        try {\n            request.user = await this.authService.validateRefreshToken(token);\n\n            return true;\n        } catch (error) {\n            if (error instanceof TokenExpiredError || error instanceof JsonWebTokenError) {\n                const trace = { trace: error.stack ?? 'No stack' };\n                error = new UnauthorizedException(error.message);\n                this.logger.error(error.message, trace);\n                throw error;\n            } else {\n                error = new UnauthorizedException();\n                this.logger.error(error.message, { trace: error.stack ?? 'No stack' });\n                throw error;\n            }\n        }\n    }\n\n    private extractRefreshTokenFromCookie(request: any): string {\n        const token = request.cookies['refreshToken'];\n\n        if (!token) {\n            const error = new UnauthorizedException('쿠키에 refreshToken이 없습니다');\n            this.logger.error(`쿠키에 refreshToken이 없습니다`, { trace: error.stack ?? '스택 없음' });\n            throw error;\n        }\n\n        return token;\n    }\n}\n"],"names":["RefreshTokenGuard","canActivate","context","request","switchToHttp","getRequest","token","extractRefreshTokenFromCookie","user","authService","validateRefreshToken","error","TokenExpiredError","JsonWebTokenError","trace","stack","UnauthorizedException","message","logger","cookies","constructor","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAOaA;;;eAAAA;;;wBAPoE;qBAC5B;sCAEhB;6BACT;;;;;;;;;;AAGrB,IAAA,AAAMA,oBAAN,MAAMA;IAMT,MAAMC,YAAYC,OAAyB,EAAoB;QAC3D,MAAMC,UAAUD,QAAQE,YAAY,GAAGC,UAAU;QACjD,MAAMC,QAAQ,IAAI,CAACC,6BAA6B,CAACJ;QAEjD,IAAI;YACAA,QAAQK,IAAI,GAAG,MAAM,IAAI,CAACC,WAAW,CAACC,oBAAoB,CAACJ;YAE3D,OAAO;QACX,EAAE,OAAOK,OAAO;YACZ,IAAIA,iBAAiBC,sBAAiB,IAAID,iBAAiBE,sBAAiB,EAAE;oBACnDF;gBAAvB,MAAMG,QAAQ;oBAAEA,OAAOH,CAAAA,eAAAA,MAAMI,KAAK,cAAXJ,0BAAAA,eAAe;gBAAW;gBACjDA,QAAQ,IAAIK,6BAAqB,CAACL,MAAMM,OAAO;gBAC/C,IAAI,CAACC,MAAM,CAACP,KAAK,CAACA,MAAMM,OAAO,EAAEH;gBACjC,MAAMH;YACV,OAAO;gBACHA,QAAQ,IAAIK,6BAAqB;oBACSL;gBAA1C,IAAI,CAACO,MAAM,CAACP,KAAK,CAACA,MAAMM,OAAO,EAAE;oBAAEH,OAAOH,CAAAA,gBAAAA,MAAMI,KAAK,cAAXJ,2BAAAA,gBAAe;gBAAW;gBACpE,MAAMA;YACV;QACJ;IACJ;IAEQJ,8BAA8BJ,OAAY,EAAU;QACxD,MAAMG,QAAQH,QAAQgB,OAAO,CAAC,eAAe;QAE7C,IAAI,CAACb,OAAO;YACR,MAAMK,QAAQ,IAAIK,6BAAqB,CAAC;gBACaL;YAArD,IAAI,CAACO,MAAM,CAACP,KAAK,CAAC,CAAC,sBAAsB,CAAC,EAAE;gBAAEG,OAAOH,CAAAA,eAAAA,MAAMI,KAAK,cAAXJ,0BAAAA,eAAe;YAAQ;YAC5E,MAAMA;QACV;QAEA,OAAOL;IACX;IArCAc,YACI,AAAQX,WAAwB,EAChC,AAAQS,MAA4B,CACtC;aAFUT,cAAAA;aACAS,SAAAA;IACT;AAmCP;AAvCalB;IADZqB,IAAAA,kBAAU;;;eAGkB,wBAAW,4BAAX,wBAAW;eAChB,0CAAoB,4BAApB,0CAAoB;;GAH/BrB"}