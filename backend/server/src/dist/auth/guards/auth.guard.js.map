{"version":3,"sources":["../../../src/auth/guards/auth.guard.ts"],"sourcesContent":["import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { JsonWebTokenError, TokenExpiredError } from '@nestjs/jwt';\nimport { Request } from 'express';\n\nimport { WinstonLoggerService } from '../../common/logger/winstonLogger.service';\nimport { AuthService } from '../auth.service';\nimport { SKIP } from '../decorators/public.decorator';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n    constructor(\n        private authService: AuthService,\n        private reflector: Reflector,\n        private logger: WinstonLoggerService,\n    ) {}\n\n    async canActivate(context: ExecutionContext): Promise<boolean> {\n        if (this.shouldSkipAuthGuard(context)) {\n            return true;\n        }\n\n        const request = context.switchToHttp().getRequest();\n        const token = this.extractAccessTokenFromHeader(request);\n        try {\n            request.user = await this.authService.validateAccessToken(token);\n\n            return true;\n        } catch (error) {\n            if (error instanceof TokenExpiredError || error instanceof JsonWebTokenError) {\n                error = new UnauthorizedException(error.message);\n                this.logger.error(error.message, { trace: error.stack ?? 'No stack' });\n                throw error;\n            } else {\n                error = new UnauthorizedException();\n                this.logger.error(error.message, { trace: error.stack ?? 'No stack' });\n                throw error;\n            }\n        }\n    }\n\n    private shouldSkipAuthGuard(context: ExecutionContext): boolean {\n        const request = context.switchToHttp().getRequest();\n        const skipAuthGuard = this.reflector.getAllAndOverride<boolean>(SKIP, [\n            context.getHandler(),\n            context.getClass(),\n        ]);\n\n        return skipAuthGuard || request.url === '/metrics';\n    }\n\n    private extractAccessTokenFromHeader(request: Request): string {\n        const authorizationHeader = request.headers.authorization;\n\n        if (!authorizationHeader) {\n            const error = new UnauthorizedException('헤더에 Authorization 필드가 없습니다');\n            this.logger.error(`헤더에 Authorization 필드가 없습니다`, { trace: error.stack ?? 'No stack' });\n            throw error;\n        }\n\n        const [type, token] = authorizationHeader.split(' ');\n\n        if (!token || type !== 'Bearer') {\n            const error = new UnauthorizedException(\n                'Token does not exist in Authorization header or is in an invalid format.',\n            );\n            this.logger.error(`헤더의 Authorization 필드에 토큰이 없거나, 형식이 잘못되었습니다`, {\n                trace: error.stack ?? 'No stack',\n            });\n            throw error;\n        }\n\n        return token;\n    }\n}\n"],"names":["AuthGuard","canActivate","context","shouldSkipAuthGuard","request","switchToHttp","getRequest","token","extractAccessTokenFromHeader","user","authService","validateAccessToken","error","TokenExpiredError","JsonWebTokenError","UnauthorizedException","message","logger","trace","stack","skipAuthGuard","reflector","getAllAndOverride","SKIP","getHandler","getClass","url","authorizationHeader","headers","authorization","type","split","constructor","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAUaA;;;eAAAA;;;wBAVoE;sBACvD;qBAC2B;sCAGhB;6BACT;iCACP;;;;;;;;;;AAGd,IAAA,AAAMA,YAAN,MAAMA;IAOT,MAAMC,YAAYC,OAAyB,EAAoB;QAC3D,IAAI,IAAI,CAACC,mBAAmB,CAACD,UAAU;YACnC,OAAO;QACX;QAEA,MAAME,UAAUF,QAAQG,YAAY,GAAGC,UAAU;QACjD,MAAMC,QAAQ,IAAI,CAACC,4BAA4B,CAACJ;QAChD,IAAI;YACAA,QAAQK,IAAI,GAAG,MAAM,IAAI,CAACC,WAAW,CAACC,mBAAmB,CAACJ;YAE1D,OAAO;QACX,EAAE,OAAOK,OAAO;YACZ,IAAIA,iBAAiBC,sBAAiB,IAAID,iBAAiBE,sBAAiB,EAAE;gBAC1EF,QAAQ,IAAIG,6BAAqB,CAACH,MAAMI,OAAO;oBACLJ;gBAA1C,IAAI,CAACK,MAAM,CAACL,KAAK,CAACA,MAAMI,OAAO,EAAE;oBAAEE,OAAON,CAAAA,eAAAA,MAAMO,KAAK,cAAXP,0BAAAA,eAAe;gBAAW;gBACpE,MAAMA;YACV,OAAO;gBACHA,QAAQ,IAAIG,6BAAqB;oBACSH;gBAA1C,IAAI,CAACK,MAAM,CAACL,KAAK,CAACA,MAAMI,OAAO,EAAE;oBAAEE,OAAON,CAAAA,gBAAAA,MAAMO,KAAK,cAAXP,2BAAAA,gBAAe;gBAAW;gBACpE,MAAMA;YACV;QACJ;IACJ;IAEQT,oBAAoBD,OAAyB,EAAW;QAC5D,MAAME,UAAUF,QAAQG,YAAY,GAAGC,UAAU;QACjD,MAAMc,gBAAgB,IAAI,CAACC,SAAS,CAACC,iBAAiB,CAAUC,qBAAI,EAAE;YAClErB,QAAQsB,UAAU;YAClBtB,QAAQuB,QAAQ;SACnB;QAED,OAAOL,iBAAiBhB,QAAQsB,GAAG,KAAK;IAC5C;IAEQlB,6BAA6BJ,OAAgB,EAAU;QAC3D,MAAMuB,sBAAsBvB,QAAQwB,OAAO,CAACC,aAAa;QAEzD,IAAI,CAACF,qBAAqB;YACtB,MAAMf,QAAQ,IAAIG,6BAAqB,CAAC;gBACiBH;YAAzD,IAAI,CAACK,MAAM,CAACL,KAAK,CAAC,CAAC,0BAA0B,CAAC,EAAE;gBAAEM,OAAON,CAAAA,eAAAA,MAAMO,KAAK,cAAXP,0BAAAA,eAAe;YAAW;YACnF,MAAMA;QACV;QAEA,MAAM,CAACkB,MAAMvB,MAAM,GAAGoB,oBAAoBI,KAAK,CAAC;QAEhD,IAAI,CAACxB,SAASuB,SAAS,UAAU;YAC7B,MAAMlB,QAAQ,IAAIG,6BAAqB,CACnC;gBAGOH;YADX,IAAI,CAACK,MAAM,CAACL,KAAK,CAAC,CAAC,0CAA0C,CAAC,EAAE;gBAC5DM,OAAON,CAAAA,gBAAAA,MAAMO,KAAK,cAAXP,2BAAAA,gBAAe;YAC1B;YACA,MAAMA;QACV;QAEA,OAAOL;IACX;IA9DAyB,YACI,AAAQtB,WAAwB,EAChC,AAAQW,SAAoB,EAC5B,AAAQJ,MAA4B,CACtC;aAHUP,cAAAA;aACAW,YAAAA;aACAJ,SAAAA;IACT;AA2DP;AAhEajB;IADZiC,IAAAA,kBAAU;;;eAGkB,wBAAW,4BAAX,wBAAW;eACb,eAAS,4BAAT,eAAS;eACZ,0CAAoB,4BAApB,0CAAoB;;GAJ/BjC"}