{"version":3,"sources":["../../../src/auth/oauth/naver.service.ts"],"sourcesContent":["import { HttpService } from '@nestjs/axios';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport axios from 'axios';\nimport { firstValueFrom } from 'rxjs';\n\nimport { OauthService, RequestToken, RequestTokenRefresh, RequestUserInfo } from './oauth.service.interface';\n\nimport { WinstonLoggerService } from '../../common/logger/winstonLogger.service';\n\ninterface TokenResponse {\n    access_token: string;\n    refresh_token: string;\n    token_type: string;\n    expires_in: number;\n}\n\ninterface UserInfoResponse {\n    resultcode: string;\n    message: string;\n    response: {\n        id: string;\n        nickname: string;\n        email: string;\n        profile_image: string;\n    };\n}\n\ninterface TokenRefreshResponse {\n    access_token: string;\n    token_type: string;\n    expires_in: number;\n}\n\n@Injectable()\nexport class NaverService implements OauthService {\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly httpService: HttpService,\n        private readonly logger: WinstonLoggerService,\n    ) {}\n\n    private readonly CLIENT_ID = this.configService.get<string>('NAVER_CLIENT_ID');\n    private readonly CLIENT_SECRET = this.configService.get<string>('NAVER_CLIENT_SECRET');\n    private readonly TOKEN_API = this.configService.get<string>('NAVER_TOKEN_API')!;\n    private readonly USER_INFO_API = this.configService.get<string>('NAVER_USER_INFO_API')!;\n\n    async requestToken(authorizeCode: string): Promise<RequestToken> {\n        try {\n            const { data } = await firstValueFrom(\n                this.httpService.get<TokenResponse>(this.TOKEN_API, {\n                    params: {\n                        grant_type: 'authorization_code',\n                        client_id: this.CLIENT_ID,\n                        client_secret: this.CLIENT_SECRET,\n                        code: authorizeCode,\n                        state: 'naverLoginState',\n                    },\n                }),\n            );\n\n            return data;\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Naver: Token 발급 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Naver: Token 발급 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestUserInfo(accessToken: string): Promise<RequestUserInfo> {\n        try {\n            const { data } = await firstValueFrom(\n                this.httpService.get<UserInfoResponse>(this.USER_INFO_API, {\n                    headers: {\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }),\n            );\n\n            this.logger.log('requestUserInfo', { ...data });\n\n            return {\n                oauthId: data.response.id,\n                oauthNickname: data.response.nickname,\n                email: data.response.email,\n                profileImageUrl: data.response.profile_image,\n            };\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Naver: 유저 정보 조회 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Naver: 유저 정보 조회 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestTokenExpiration(accessToken: string) {\n        try {\n            await firstValueFrom(\n                this.httpService.get<{ access_token: string; result: string }>(this.TOKEN_API, {\n                    params: {\n                        grant_type: 'delete',\n                        client_id: this.CLIENT_ID,\n                        client_secret: this.CLIENT_SECRET,\n                        access_token: accessToken,\n                        service_provider: 'NAVER',\n                    },\n                }),\n            );\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Naver: Token 만료 기간 조회 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Naver: Token 만료 기간 조회 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestTokenRefresh(refreshToken: string): Promise<RequestTokenRefresh> {\n        try {\n            const { data } = await firstValueFrom(\n                this.httpService.get<TokenRefreshResponse>(this.TOKEN_API, {\n                    params: {\n                        grant_type: 'refresh_token',\n                        client_id: this.CLIENT_ID,\n                        client_secret: this.CLIENT_SECRET,\n                        refresh_token: refreshToken,\n                    },\n                }),\n            );\n\n            return data;\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Naver: Token 갱신 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Naver: Token 갱신 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n}\n"],"names":["NaverService","requestToken","authorizeCode","data","firstValueFrom","httpService","get","TOKEN_API","params","grant_type","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","code","state","error","axios","isAxiosError","response","logger","trace","stack","BadRequestException","requestUserInfo","accessToken","USER_INFO_API","headers","Authorization","log","oauthId","id","oauthNickname","nickname","email","profileImageUrl","profile_image","requestTokenExpiration","access_token","service_provider","requestTokenRefresh","refreshToken","refresh_token","constructor","configService","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}