{"version":3,"sources":["../../../src/auth/oauth/kakao.service.ts"],"sourcesContent":["import { HttpService } from '@nestjs/axios';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport axios from 'axios';\nimport { firstValueFrom } from 'rxjs';\n\nimport { OauthService, RequestToken, RequestTokenRefresh, RequestUserInfo } from './oauth.service.interface';\n\nimport { WinstonLoggerService } from '../../common/logger/winstonLogger.service';\n\ninterface TokenResponse {\n    token_type: string;\n    access_token: string;\n    id_token?: string;\n    expires_in: number;\n    refresh_token: string;\n    refresh_token_expires_in: number;\n    scope?: string;\n}\n\ninterface UserInfoResponse {\n    id: number;\n    properties: {\n        nickname: string;\n        profile_image: string;\n    };\n    kakao_account: {\n        email: string;\n    };\n}\n\ninterface TokenRefreshResponse {\n    token_type: string;\n    access_token: string;\n    expires_in: number;\n    refresh_token?: string;\n    refresh_token_expires_in?: number;\n}\n\n@Injectable()\nexport class KakaoService implements OauthService {\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly httpService: HttpService,\n        private readonly logger: WinstonLoggerService,\n    ) {}\n\n    private readonly CLIENT_ID = this.configService.get<string>('KAKAO_CLIENT_ID');\n    private readonly CLIENT_SECRET = this.configService.get<string>('KAKAO_CLIENT_SECRET');\n    private readonly TOKEN_API = this.configService.get<string>('KAKAO_TOKEN_API')!;\n    private readonly USER_INFO_API = this.configService.get<string>('KAKAO_USER_INFO_API')!;\n    private readonly LOGOUT_API = this.configService.get<string>('KAKAO_LOGOUT_API')!;\n    private readonly UNLINK_API = this.configService.get<string>('KAKAO_UNLINK_API')!;\n\n    async requestToken(authorizeCode: string, redirectURI: string): Promise<RequestToken> {\n        try {\n            const { data } = await firstValueFrom(\n                this.httpService.post<TokenResponse>(\n                    this.TOKEN_API,\n                    {\n                        code: authorizeCode,\n                        grant_type: 'authorization_code',\n                        client_id: this.CLIENT_ID,\n                        client_secret: this.CLIENT_SECRET,\n                        redirect_uri: redirectURI,\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\n                        },\n                    },\n                ),\n            );\n\n            return data;\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error(`Kakao: Token 발급 요청이 실패했습니다`, {\n                    trace: error.stack ?? '스택 없음',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Kakao: Token 발급 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestUserInfo(accessToken: string): Promise<RequestUserInfo> {\n        try {\n            const { data } = await firstValueFrom(\n                this.httpService.get<UserInfoResponse>(this.USER_INFO_API, {\n                    headers: {\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }),\n            );\n\n            this.logger.log('requestUserInfo', { ...data });\n\n            return {\n                oauthId: data.id.toString(),\n                oauthNickname: data.properties.nickname,\n                email: data.kakao_account.email,\n                profileImageUrl: data.properties.profile_image,\n            };\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Kakao: 유저 정보 조회 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Kakao: 유저 정보 조회 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestTokenExpiration(accessToken: string) {\n        try {\n            await firstValueFrom(\n                this.httpService.post<{ id: number }>(\n                    this.LOGOUT_API,\n                    {},\n                    {\n                        headers: {\n                            Authorization: `Bearer ${accessToken}`,\n                            'Content-Type': 'application/x-www-form-urlencoded',\n                        },\n                    },\n                ),\n            );\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Kakao: Token 만료 기간 조회 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Kakao: Token 만료 기간 조회 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestUnlink(accessToken: string) {\n        try {\n            await firstValueFrom(\n                this.httpService.post<{ id: number }>(\n                    this.UNLINK_API,\n                    {},\n                    {\n                        headers: {\n                            Authorization: `Bearer ${accessToken}`,\n                            'Content-Type': 'application/x-www-form-urlencoded',\n                        },\n                    },\n                ),\n            );\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Kakao: 계정 연결 끊기 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Kakao: 계정 연결 끊기 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestTokenRefresh(refreshToken: string): Promise<RequestTokenRefresh> {\n        try {\n            const { data } = await firstValueFrom(\n                this.httpService.post<TokenRefreshResponse>(\n                    this.TOKEN_API,\n                    {\n                        grant_type: 'refresh_token',\n                        client_id: this.CLIENT_ID,\n                        client_secret: this.CLIENT_SECRET,\n                        refresh_token: refreshToken,\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8',\n                        },\n                    },\n                ),\n            );\n\n            return data;\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Kakao: Token 갱신 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Kakao: Token 갱신 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n}\n"],"names":["KakaoService","requestToken","authorizeCode","redirectURI","data","firstValueFrom","httpService","post","TOKEN_API","code","grant_type","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","redirect_uri","headers","error","axios","isAxiosError","response","logger","trace","stack","BadRequestException","requestUserInfo","accessToken","get","USER_INFO_API","Authorization","log","oauthId","id","toString","oauthNickname","properties","nickname","email","kakao_account","profileImageUrl","profile_image","requestTokenExpiration","LOGOUT_API","requestUnlink","UNLINK_API","requestTokenRefresh","refreshToken","refresh_token","constructor","configService","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}