{"version":3,"sources":["../../../src/auth/oauth/google.service.ts"],"sourcesContent":["import { HttpService } from '@nestjs/axios';\nimport { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport axios from 'axios';\nimport { firstValueFrom } from 'rxjs';\n\nimport { OauthService, RequestToken, RequestTokenRefresh, RequestUserInfo } from './oauth.service.interface';\n\nimport { WinstonLoggerService } from '../../common/logger/winstonLogger.service';\n\ninterface TokenResponse {\n    access_token: string;\n    expires_in: number;\n    refresh_token: string;\n    scope: string;\n    token_type: string;\n}\n\ninterface UserInfoResponse {\n    id: string;\n    email: string;\n    name: string;\n    picture: string;\n}\n\ninterface TokenRefreshResponse {\n    access_token: string;\n    expires_in: number;\n    scope: string;\n    token_type: string;\n}\n\n@Injectable()\nexport class GoogleService implements OauthService {\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly httpService: HttpService,\n        private readonly logger: WinstonLoggerService,\n    ) {}\n\n    private readonly CLIENT_ID = this.configService.get<string>('GOOGLE_CLIENT_ID');\n    private readonly CLIENT_SECRET = this.configService.get<string>('GOOGLE_CLIENT_SECRET');\n    private readonly TOKEN_API = this.configService.get<string>('GOOGLE_TOKEN_API')!;\n    private readonly USER_INFO_API = this.configService.get<string>('GOOGLE_USER_INFO_API')!;\n    private readonly REVOKE_API = this.configService.get<string>('GOOGLE_REVOKE_API')!;\n\n    async requestToken(authorizeCode: string, redirectURI: string): Promise<RequestToken> {\n        try {\n            const { data } = await firstValueFrom(\n                this.httpService.post<TokenResponse>(this.TOKEN_API, {\n                    client_id: this.CLIENT_ID,\n                    client_secret: this.CLIENT_SECRET,\n                    code: authorizeCode,\n                    grant_type: 'authorization_code',\n                    redirect_uri: redirectURI,\n                }),\n            );\n\n            return data;\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Google: Token 발급 요청이 실패했습니다', {\n                    trace: error.stack ?? '스택 없음',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Google: Token 발급 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestUserInfo(accessToken: string): Promise<RequestUserInfo> {\n        try {\n            const { data } = await firstValueFrom(\n                this.httpService.get<UserInfoResponse>(this.USER_INFO_API, {\n                    headers: {\n                        Authorization: `Bearer ${accessToken}`,\n                    },\n                }),\n            );\n\n            this.logger.log('requestUserInfo', { ...data });\n\n            return {\n                oauthId: data.id,\n                oauthNickname: data.name,\n                email: data.email,\n                profileImageUrl: data.picture,\n            };\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Google: 유저 정보 조회 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Google: 유저 정보 조회 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestTokenExpiration(accessToken: string) {\n        try {\n            await firstValueFrom(\n                this.httpService.post(\n                    this.REVOKE_API,\n                    {},\n                    {\n                        headers: {\n                            'Content-Type': 'application/x-www-form-urlencoded',\n                        },\n                        params: {\n                            token: accessToken,\n                        },\n                    },\n                ),\n            );\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Google: Token 만료 기간 조회 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Google: Token 만료 기간 조회 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n\n    async requestTokenRefresh(refreshToken: string): Promise<RequestTokenRefresh> {\n        try {\n            const { data } = await firstValueFrom(\n                this.httpService.post<TokenRefreshResponse>(this.TOKEN_API, {\n                    client_id: this.CLIENT_ID,\n                    client_secret: this.CLIENT_SECRET,\n                    grant_type: 'refresh_token',\n                    refresh_token: refreshToken,\n                }),\n            );\n\n            return data;\n        } catch (error) {\n            if (axios.isAxiosError(error) && error.response) {\n                this.logger.error('Google: Token 갱신 요청이 실패했습니다', {\n                    trace: error.stack ?? 'No stack',\n                    response: error.response.data,\n                });\n                error = new BadRequestException('Google: Token 갱신 요청이 실패했습니다');\n            }\n            throw error;\n        }\n    }\n}\n"],"names":["GoogleService","requestToken","authorizeCode","redirectURI","data","firstValueFrom","httpService","post","TOKEN_API","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","code","grant_type","redirect_uri","error","axios","isAxiosError","response","logger","trace","stack","BadRequestException","requestUserInfo","accessToken","get","USER_INFO_API","headers","Authorization","log","oauthId","id","oauthNickname","name","email","profileImageUrl","picture","requestTokenExpiration","REVOKE_API","params","token","requestTokenRefresh","refreshToken","refresh_token","constructor","configService","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}