{"version":3,"sources":["../../src/auth/auth.service.ts"],"sourcesContent":["import { Injectable, NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Transactional } from 'typeorm-transactional';\n\nimport { GoogleService } from './oauth/google.service';\nimport { KakaoService } from './oauth/kakao.service';\nimport { NaverService } from './oauth/naver.service';\nimport { AccessTokenPayload, RefreshTokenPayload, TokenService } from './token/token.service';\nimport { AuthData } from './types/auth-data.type';\nimport { OauthAuthorizeData } from './types/oauth-authorize-data.type';\nimport { OauthData } from './types/oauth-data.type';\n\nimport { WinstonLoggerService } from '../common/logger/winstonLogger.service';\nimport { DogsService } from '../dogs/dogs.service';\nimport { S3Service } from '../s3/s3.service';\nimport { Users } from '../users/users.entity';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        private readonly tokenService: TokenService,\n        private readonly usersService: UsersService,\n        private readonly dogsService: DogsService,\n        private readonly googleService: GoogleService,\n        private readonly kakaoService: KakaoService,\n        private readonly naverService: NaverService,\n        private readonly configService: ConfigService,\n        private readonly s3Service: S3Service,\n        private readonly logger: WinstonLoggerService,\n    ) {}\n\n    private readonly REDIRECT_URI = this.configService.get<string>('CORS_ORIGIN') + '/callback';\n    private readonly S3_PROFILE_IMAGE_PATH = 'default/profile.png';\n\n    async login({ authorizeCode, provider }: OauthAuthorizeData): Promise<AuthData | OauthData | undefined> {\n        const { access_token: oauthAccessToken, refresh_token: oauthRefreshToken } = await this[\n            `${provider}Service`\n        ].requestToken(authorizeCode, this.REDIRECT_URI);\n\n        const { oauthId } = await this[`${provider}Service`].requestUserInfo(oauthAccessToken);\n\n        const refreshToken = await this.tokenService.signRefreshToken(oauthId, provider);\n        this.logger.debug('login - signRefreshToken', { refreshToken });\n\n        try {\n            const { id: userId } = await this.usersService.updateAndFindOne(\n                { oauthId },\n                { oauthAccessToken, oauthRefreshToken, refreshToken },\n            );\n\n            const accessToken = await this.tokenService.signAccessToken(userId, provider);\n            this.logger.debug('login - signAccessToken', { accessToken });\n\n            return { accessToken, refreshToken };\n        } catch (error) {\n            if (error instanceof NotFoundException) {\n                return { oauthAccessToken, oauthRefreshToken, provider };\n            }\n            this.logger.error(`로그인 에러`, { trace: error.stack ?? '스택 없음' });\n            throw error;\n        }\n    }\n\n    async signup({ oauthAccessToken, oauthRefreshToken, provider }: OauthData): Promise<AuthData> {\n        const { oauthId, oauthNickname, email } = await this[`${provider}Service`].requestUserInfo(oauthAccessToken);\n        const profileImageUrl = this.S3_PROFILE_IMAGE_PATH;\n\n        const refreshToken = await this.tokenService.signRefreshToken(oauthId, provider);\n        this.logger.debug('signup - signRefreshToken', { refreshToken });\n\n        const { id: userId } = await this.usersService.createIfNotExists({\n            oauthNickname,\n            email,\n            profileImageUrl,\n            oauthId,\n            oauthAccessToken,\n            oauthRefreshToken,\n            refreshToken,\n        });\n\n        const accessToken = await this.tokenService.signAccessToken(userId, provider);\n        this.logger.debug('signup - signAccessToken', { accessToken });\n\n        return { accessToken, refreshToken };\n    }\n\n    async logout({ userId, provider }: AccessTokenPayload): Promise<void> {\n        const { oauthAccessToken } = await this.usersService.findOne({ where: { id: userId } });\n        this.logger.debug('logout - oauthAccessToken', { oauthAccessToken });\n\n        if (provider === 'kakao') {\n            await this.kakaoService.requestTokenExpiration(oauthAccessToken);\n        }\n    }\n\n    async reissueTokens({ oauthId, provider }: RefreshTokenPayload): Promise<AuthData> {\n        const { id: userId, oauthRefreshToken } = await this.usersService.findOne({\n            where: { oauthId },\n            select: ['id', 'oauthRefreshToken'],\n        });\n\n        const [\n            { access_token: newOauthAccessToken, refresh_token: newOauthRefreshToken },\n            newAccessToken,\n            newRefreshToken,\n        ] = await Promise.all([\n            this[`${provider}Service`].requestTokenRefresh(oauthRefreshToken),\n            this.tokenService.signAccessToken(userId, provider),\n            this.tokenService.signRefreshToken(oauthId, provider),\n        ]);\n\n        const attributes: Partial<Users> = { oauthAccessToken: newOauthAccessToken, refreshToken: newRefreshToken };\n\n        if (newOauthRefreshToken) {\n            attributes.oauthRefreshToken = newOauthRefreshToken;\n        }\n\n        this.usersService.update({ id: userId }, attributes);\n\n        return { accessToken: newAccessToken, refreshToken: newRefreshToken };\n    }\n\n    async deactivate({ userId, provider }: AccessTokenPayload): Promise<void> {\n        const { oauthAccessToken } = await this.usersService.findOne({ where: { id: userId } });\n\n        if (provider === 'kakao') {\n            await this.kakaoService.requestUnlink(oauthAccessToken);\n        } else {\n            await this[`${provider}Service`].requestTokenExpiration(oauthAccessToken);\n        }\n\n        await this.deleteUserData(userId);\n    }\n\n    @Transactional()\n    private async deleteUserData(userId: number) {\n        await this.dogsService.deleteOwnDogs(userId);\n        await this.usersService.delete(userId);\n    }\n\n    async validateAccessToken(token: string): Promise<AccessTokenPayload> {\n        const payload = (await this.tokenService.verify(token)) as AccessTokenPayload;\n        this.logger.log('Payload', payload);\n\n        const result = await this.usersService.findOne({ where: { id: payload.userId } });\n        this.logger.debug('validateAccessToken - find User result', { ...result });\n\n        return payload;\n    }\n\n    async validateRefreshToken(token: string): Promise<RefreshTokenPayload> {\n        const payload = (await this.tokenService.verify(token)) as RefreshTokenPayload;\n        this.logger.log('Payload', payload);\n\n        const { refreshToken } = await this.usersService.findOne({ where: { oauthId: payload.oauthId } });\n\n        if (refreshToken !== token) {\n            throw new UnauthorizedException();\n        }\n\n        return payload;\n    }\n}\n"],"names":["AuthService","login","authorizeCode","provider","access_token","oauthAccessToken","refresh_token","oauthRefreshToken","requestToken","REDIRECT_URI","oauthId","requestUserInfo","refreshToken","tokenService","signRefreshToken","logger","debug","id","userId","usersService","updateAndFindOne","accessToken","signAccessToken","error","NotFoundException","trace","stack","signup","oauthNickname","email","profileImageUrl","S3_PROFILE_IMAGE_PATH","createIfNotExists","logout","findOne","where","kakaoService","requestTokenExpiration","reissueTokens","select","newOauthAccessToken","newOauthRefreshToken","newAccessToken","newRefreshToken","Promise","all","requestTokenRefresh","attributes","update","deactivate","requestUnlink","deleteUserData","dogsService","deleteOwnDogs","delete","validateAccessToken","token","payload","verify","log","result","validateRefreshToken","UnauthorizedException","constructor","googleService","naverService","configService","s3Service","get","Transactional","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}