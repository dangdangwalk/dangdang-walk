{"version":3,"sources":["../../src/auth/auth.service.spec.ts"],"sourcesContent":["import { HttpService } from '@nestjs/axios';\nimport { NotFoundException, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { Test, TestingModule } from '@nestjs/testing';\n\nimport { AuthService } from './auth.service';\nimport { GoogleService } from './oauth/google.service';\nimport { KakaoService } from './oauth/kakao.service';\nimport { NaverService } from './oauth/naver.service';\nimport { AccessTokenPayload, RefreshTokenPayload, TokenService } from './token/token.service';\nimport { OauthAuthorizeData } from './types/oauth-authorize-data.type';\nimport { OauthData } from './types/oauth-data.type';\nimport { OAUTH_PROVIDERS } from './types/oauth-provider.type';\n\nimport { WinstonLoggerService } from '../common/logger/winstonLogger.service';\nimport { DogsService } from '../dogs/dogs.service';\nimport { mockUser } from '../fixtures/users.fixture';\nimport { S3Service } from '../s3/s3.service';\nimport { Users } from '../users/users.entity';\nimport { UsersRepository } from '../users/users.repository';\nimport { UsersService } from '../users/users.service';\n\ndescribe('AuthService', () => {\n    let service: AuthService;\n    let usersService: UsersService;\n    let tokenService: TokenService;\n    let googleService: GoogleService;\n    let kakaoService: KakaoService;\n    let naverService: NaverService;\n\n    beforeEach(async () => {\n        const module: TestingModule = await Test.createTestingModule({\n            providers: [\n                AuthService,\n                {\n                    provide: S3Service,\n                    useValue: { deleteObjectFolder: jest.fn() },\n                },\n                {\n                    provide: UsersService,\n                    useValue: { updateAndFindOne: jest.fn(), createIfNotExists: jest.fn(), findOne: jest.fn() },\n                },\n                {\n                    provide: DogsService,\n                    useValue: { deleteDogFromUser: jest.fn() },\n                },\n                { provide: UsersRepository, useValue: {} },\n                TokenService,\n                JwtService,\n                { provide: HttpService, useValue: {} },\n                GoogleService,\n                KakaoService,\n                NaverService,\n                ConfigService,\n                WinstonLoggerService,\n            ],\n        }).compile();\n\n        service = module.get<AuthService>(AuthService);\n        usersService = module.get<UsersService>(UsersService);\n        tokenService = module.get<TokenService>(TokenService);\n        googleService = module.get<GoogleService>(GoogleService);\n        kakaoService = module.get<KakaoService>(KakaoService);\n        naverService = module.get<NaverService>(NaverService);\n\n        const oauthServiceList = [googleService, kakaoService, naverService];\n\n        const mockTokenResponse = {\n            access_token: mockUser.oauthAccessToken,\n            expires_in: 3600,\n            refresh_token: mockUser.oauthRefreshToken,\n            refresh_token_expires_in: 3600,\n            scope: 'scope',\n            token_type: 'bearer',\n        };\n\n        for (const oauthService of oauthServiceList) {\n            jest.spyOn(oauthService, 'requestToken').mockResolvedValue(mockTokenResponse);\n            jest.spyOn(oauthService, 'requestUserInfo').mockResolvedValue({\n                oauthId: mockUser.oauthId,\n                oauthNickname: 'test',\n                email: 'test@mail.com',\n                profileImageUrl: 'test.jpg',\n            });\n            jest.spyOn(oauthService, 'requestTokenExpiration').mockResolvedValue();\n            jest.spyOn(oauthService, 'requestTokenRefresh').mockResolvedValue(mockTokenResponse);\n        }\n\n        jest.spyOn(kakaoService, 'requestUnlink').mockResolvedValue();\n        jest.spyOn(tokenService, 'signRefreshToken').mockResolvedValue(Promise.resolve(mockUser.refreshToken));\n        jest.spyOn(tokenService, 'signAccessToken').mockResolvedValue(Promise.resolve(mockUser.refreshToken));\n    });\n\n    const authorizeCode = 'authorizeCode';\n\n    describe('login', () => {\n        context('사용자가 존재하면', () => {\n            for (let i = 0; i < 3; i++) {\n                const provider = OAUTH_PROVIDERS[i];\n                it(`${provider} 로그인 후 access token과 refresh token을 반환해야 한다.`, async () => {\n                    jest.spyOn(usersService, 'updateAndFindOne').mockResolvedValue({ id: 1 } as Users);\n\n                    const result = await service.login({ authorizeCode, provider } as OauthAuthorizeData);\n\n                    expect(result).toEqual({\n                        accessToken: mockUser.refreshToken,\n                        refreshToken: mockUser.refreshToken,\n                    });\n                });\n            }\n        });\n\n        context('사용자가 존재하지 않으면', () => {\n            for (let i = 0; i < 3; i++) {\n                const provider = OAUTH_PROVIDERS[i];\n                it(`${provider} 로그인 후 oauth data를 반환해야 한다.`, async () => {\n                    jest.spyOn(usersService, 'updateAndFindOne').mockRejectedValue(new NotFoundException());\n\n                    const result = await service.login({ authorizeCode, provider } as OauthAuthorizeData);\n\n                    expect(result).toEqual({\n                        oauthAccessToken: mockUser.oauthAccessToken,\n                        oauthRefreshToken: mockUser.oauthRefreshToken,\n                        provider,\n                    });\n                });\n            }\n        });\n    });\n\n    describe('signup', () => {\n        context('사용자가 존재하지 않으면', () => {\n            for (let i = 0; i < 3; i++) {\n                const provider = OAUTH_PROVIDERS[i];\n                it(`${provider} 회원가입 후 access token과 refresh token을 반환해야 한다.`, async () => {\n                    jest.spyOn(usersService, 'createIfNotExists').mockResolvedValue({ id: 1 } as Users);\n\n                    const result = await service.signup({\n                        oauthAccessToken: mockUser.oauthAccessToken,\n                        oauthRefreshToken: mockUser.oauthRefreshToken,\n                        oauthId: mockUser.oauthId,\n                        provider,\n                    } as OauthData);\n\n                    expect(result).toEqual({\n                        accessToken: mockUser.refreshToken,\n                        refreshToken: mockUser.refreshToken,\n                    });\n                });\n            }\n        });\n    });\n\n    describe('validateAccessToken', () => {\n        context('access token이 주어지면', () => {\n            it('access token을 검증해야 한다.', async () => {\n                const userId = 1;\n                const payload = { userId };\n                jest.spyOn(tokenService, 'verify').mockImplementation(() =>\n                    Promise.resolve(payload as AccessTokenPayload),\n                );\n                jest.spyOn(usersService, 'findOne').mockResolvedValue({ id: userId } as Users);\n\n                const result = await service.validateAccessToken('accessToken');\n                expect(result).toEqual(payload);\n            });\n        });\n    });\n\n    describe('validateRefreshToken', () => {\n        const oauthId = '123';\n        const payload = { oauthId };\n\n        context('refresh token이 주어지면', () => {\n            it('refresh token을 검증해야 한다.', async () => {\n                jest.spyOn(tokenService, 'verify').mockReturnValue(Promise.resolve(payload as RefreshTokenPayload));\n                jest.spyOn(usersService, 'findOne').mockResolvedValue({\n                    oauthId: '123',\n                    refreshToken: mockUser.refreshToken,\n                } as Users);\n\n                const result = await service.validateRefreshToken(mockUser.refreshToken);\n                expect(result).toEqual(payload);\n            });\n        });\n\n        context('주어진 refresh token이 저장된 refresh token과 다르면', () => {\n            it('UnauthorizedException 예외를 던져야 한다.', async () => {\n                jest.spyOn(tokenService, 'verify').mockReturnValue(Promise.resolve(payload as RefreshTokenPayload));\n                jest.spyOn(usersService, 'findOne').mockResolvedValue({\n                    oauthId: '123',\n                    refreshToken: mockUser.refreshToken,\n                } as Users);\n\n                await expect(service.validateRefreshToken('refreshToken')).rejects.toThrow(UnauthorizedException);\n            });\n        });\n    });\n});\n"],"names":["describe","service","usersService","tokenService","googleService","kakaoService","naverService","beforeEach","module","Test","createTestingModule","providers","AuthService","provide","S3Service","useValue","deleteObjectFolder","jest","fn","UsersService","updateAndFindOne","createIfNotExists","findOne","DogsService","deleteDogFromUser","UsersRepository","TokenService","JwtService","HttpService","GoogleService","KakaoService","NaverService","ConfigService","WinstonLoggerService","compile","get","oauthServiceList","mockTokenResponse","access_token","mockUser","oauthAccessToken","expires_in","refresh_token","oauthRefreshToken","refresh_token_expires_in","scope","token_type","oauthService","spyOn","mockResolvedValue","oauthId","oauthNickname","email","profileImageUrl","Promise","resolve","refreshToken","authorizeCode","context","i","provider","OAUTH_PROVIDERS","it","id","result","login","expect","toEqual","accessToken","mockRejectedValue","NotFoundException","signup","userId","payload","mockImplementation","validateAccessToken","mockReturnValue","validateRefreshToken","rejects","toThrow","UnauthorizedException"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}