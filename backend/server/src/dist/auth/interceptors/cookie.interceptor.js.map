{"version":3,"sources":["../../../src/auth/interceptors/cookie.interceptor.ts"],"sourcesContent":["import { CallHandler, ExecutionContext, Injectable, NestInterceptor, NotFoundException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { CookieOptions, Response } from 'express';\nimport { Observable, map } from 'rxjs';\n\nimport { WinstonLoggerService } from '../../common/logger/winstonLogger.service';\nimport { TokenService } from '../token/token.service';\nimport { AuthData } from '../types/auth-data.type';\nimport { OauthData } from '../types/oauth-data.type';\n\n@Injectable()\nexport class CookieInterceptor implements NestInterceptor {\n    constructor(\n        private configService: ConfigService,\n        private logger: WinstonLoggerService,\n    ) {}\n\n    private readonly isProduction = this.configService.get<string>('NODE_ENV') === 'prod';\n\n    private readonly sessionCookieOptions: CookieOptions = {\n        httpOnly: true,\n        secure: this.isProduction,\n        sameSite: 'lax',\n    };\n\n    private readonly refreshCookieOptions: CookieOptions = {\n        ...this.sessionCookieOptions,\n        maxAge: TokenService.TOKEN_LIFETIME_MAP.refresh.maxAge,\n    };\n\n    intercept(context: ExecutionContext, next: CallHandler<any>): Observable<any> | Promise<Observable<any>> {\n        return next.handle().pipe(\n            map((data) => {\n                const response = context.switchToHttp().getResponse<Response>();\n\n                if (!data) {\n                    this.clearAuthCookies(response);\n                    return;\n                }\n\n                if ('accessToken' in data && 'refreshToken' in data) {\n                    this.setAuthCookies(response, data);\n                    this.clearOauthCookies(response);\n                    return { accessToken: data.accessToken };\n                } else if ('oauthAccessToken' in data && 'oauthRefreshToken' in data && 'provider' in data) {\n                    this.setOauthCookies(response, data);\n\n                    const error = new NotFoundException('일치하는 유저를 찾을 수 없습니다. 계정을 생성해주세요');\n                    this.logger.error(\n                        `일치하는 유저를 찾을 수 없습니다. 계정을 생성해주세요`,\n                        error.stack ?? '스택 없음',\n                    );\n                    throw error;\n                }\n            }),\n        );\n    }\n\n    private setAuthCookies(response: Response, { refreshToken }: AuthData): void {\n        response.cookie('refreshToken', refreshToken, this.refreshCookieOptions);\n    }\n\n    private setOauthCookies(response: Response, { oauthAccessToken, oauthRefreshToken, provider }: OauthData): void {\n        response.cookie('oauthAccessToken', oauthAccessToken, this.sessionCookieOptions);\n        response.cookie('oauthRefreshToken', oauthRefreshToken, this.sessionCookieOptions);\n        response.cookie('provider', provider, this.sessionCookieOptions);\n    }\n\n    private clearAuthCookies(response: Response): void {\n        response.clearCookie('refreshToken', this.refreshCookieOptions);\n    }\n\n    private clearOauthCookies(response: Response): void {\n        response.clearCookie('oauthAccessToken', this.sessionCookieOptions);\n        response.clearCookie('oauthRefreshToken', this.sessionCookieOptions);\n        response.clearCookie('provider', this.sessionCookieOptions);\n    }\n}\n"],"names":["CookieInterceptor","intercept","context","next","handle","pipe","map","data","response","switchToHttp","getResponse","clearAuthCookies","setAuthCookies","clearOauthCookies","accessToken","setOauthCookies","error","NotFoundException","logger","stack","refreshToken","cookie","refreshCookieOptions","oauthAccessToken","oauthRefreshToken","provider","sessionCookieOptions","clearCookie","constructor","configService","isProduction","get","httpOnly","secure","sameSite","maxAge","TokenService","TOKEN_LIFETIME_MAP","refresh","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAWaA;;;eAAAA;;;wBAXiF;wBAChE;sBAEE;sCAEK;8BACR;;;;;;;;;;AAKtB,IAAA,AAAMA,oBAAN,MAAMA;IAmBTC,UAAUC,OAAyB,EAAEC,IAAsB,EAA8C;QACrG,OAAOA,KAAKC,MAAM,GAAGC,IAAI,CACrBC,IAAAA,SAAG,EAAC,CAACC;YACD,MAAMC,WAAWN,QAAQO,YAAY,GAAGC,WAAW;YAEnD,IAAI,CAACH,MAAM;gBACP,IAAI,CAACI,gBAAgB,CAACH;gBACtB;YACJ;YAEA,IAAI,iBAAiBD,QAAQ,kBAAkBA,MAAM;gBACjD,IAAI,CAACK,cAAc,CAACJ,UAAUD;gBAC9B,IAAI,CAACM,iBAAiB,CAACL;gBACvB,OAAO;oBAAEM,aAAaP,KAAKO,WAAW;gBAAC;YAC3C,OAAO,IAAI,sBAAsBP,QAAQ,uBAAuBA,QAAQ,cAAcA,MAAM;gBACxF,IAAI,CAACQ,eAAe,CAACP,UAAUD;gBAE/B,MAAMS,QAAQ,IAAIC,yBAAiB,CAAC;oBAGhCD;gBAFJ,IAAI,CAACE,MAAM,CAACF,KAAK,CACb,CAAC,8BAA8B,CAAC,EAChCA,CAAAA,eAAAA,MAAMG,KAAK,cAAXH,0BAAAA,eAAe;gBAEnB,MAAMA;YACV;QACJ;IAER;IAEQJ,eAAeJ,QAAkB,EAAE,EAAEY,YAAY,EAAY,EAAQ;QACzEZ,SAASa,MAAM,CAAC,gBAAgBD,cAAc,IAAI,CAACE,oBAAoB;IAC3E;IAEQP,gBAAgBP,QAAkB,EAAE,EAAEe,gBAAgB,EAAEC,iBAAiB,EAAEC,QAAQ,EAAa,EAAQ;QAC5GjB,SAASa,MAAM,CAAC,oBAAoBE,kBAAkB,IAAI,CAACG,oBAAoB;QAC/ElB,SAASa,MAAM,CAAC,qBAAqBG,mBAAmB,IAAI,CAACE,oBAAoB;QACjFlB,SAASa,MAAM,CAAC,YAAYI,UAAU,IAAI,CAACC,oBAAoB;IACnE;IAEQf,iBAAiBH,QAAkB,EAAQ;QAC/CA,SAASmB,WAAW,CAAC,gBAAgB,IAAI,CAACL,oBAAoB;IAClE;IAEQT,kBAAkBL,QAAkB,EAAQ;QAChDA,SAASmB,WAAW,CAAC,oBAAoB,IAAI,CAACD,oBAAoB;QAClElB,SAASmB,WAAW,CAAC,qBAAqB,IAAI,CAACD,oBAAoB;QACnElB,SAASmB,WAAW,CAAC,YAAY,IAAI,CAACD,oBAAoB;IAC9D;IAhEAE,YACI,AAAQC,aAA4B,EACpC,AAAQX,MAA4B,CACtC;aAFUW,gBAAAA;aACAX,SAAAA;aAGKY,eAAe,IAAI,CAACD,aAAa,CAACE,GAAG,CAAS,gBAAgB;aAE9DL,uBAAsC;YACnDM,UAAU;YACVC,QAAQ,IAAI,CAACH,YAAY;YACzBI,UAAU;QACd;aAEiBZ,uBAAsC;YACnD,GAAG,IAAI,CAACI,oBAAoB;YAC5BS,QAAQC,0BAAY,CAACC,kBAAkB,CAACC,OAAO,CAACH,MAAM;QAC1D;IAbG;AA8DP;AAlEanC;IADZuC,IAAAA,kBAAU;;;eAGoB,qBAAa,4BAAb,qBAAa;eACpB,0CAAoB,4BAApB,0CAAoB;;GAH/BvC"}