{"version":3,"sources":["../../src/statistics/statistics.service.ts"],"sourcesContent":["import { BadRequestException, Injectable } from '@nestjs/common';\nimport { In } from 'typeorm';\n\nimport { Period } from './pipes/period-validation.pipe';\n\nimport { DogWalkingTotalResponse, DogsWeeklyWalkOverviewResponse } from './types/statistic.type';\n\nimport { WinstonLoggerService } from '../common/logger/winstonLogger.service';\nimport { DogWalkDayService } from '../dog-walk-day/dog-walk-day.service';\nimport { DogsService } from '../dogs/dogs.service';\nimport { JournalsService } from '../journals/journals.service';\nimport { TodayWalkTimeService } from '../today-walk-time/today-walk-time.service';\nimport { UsersService } from '../users/users.service';\n\nimport { getOneMonthAgo, getStartAndEndOfMonth, getStartAndEndOfWeek } from '../utils/date.util';\nimport { makeSubObject } from '../utils/manipulate.util';\n\n@Injectable()\nexport class StatisticsService {\n    constructor(\n        private readonly usersService: UsersService,\n        private readonly dogsService: DogsService,\n        private readonly dogWalkDayService: DogWalkDayService,\n        private readonly todayWalkTimeService: TodayWalkTimeService,\n        private readonly journalsService: JournalsService,\n        private readonly logger: WinstonLoggerService,\n    ) {}\n\n    async getDogMonthlyWalkingTotal(userId: number, dogId: number, period: Period): Promise<DogWalkingTotalResponse> {\n        let startDate: Date, endDate: Date;\n\n        if (period === 'month') {\n            ({ startDate, endDate } = getOneMonthAgo(new Date()));\n        } else {\n            throw new BadRequestException(`유효하지 않은 period: ${period}`);\n        }\n\n        return this.journalsService.findJournalsAndGetTotal(userId, dogId, startDate, endDate);\n    }\n\n    async getDogDailyWalkCountsByPeriod(\n        userId: number,\n        dogId: number,\n        date: string,\n        period: Period,\n    ): Promise<{ [date: string]: number }> {\n        let startDate: Date, endDate: Date;\n\n        if (period === 'month') {\n            ({ startDate, endDate } = getStartAndEndOfMonth(new Date(date)));\n        } else if (period === 'week') {\n            ({ startDate, endDate } = getStartAndEndOfWeek(new Date(date)));\n        } else {\n            throw new BadRequestException(`유효하지 않은 period: ${period}`);\n        }\n\n        return this.journalsService.findJournalsAndAggregateByDay(userId, dogId, startDate, endDate);\n    }\n\n    async getDogsWeeklyWalkingOverview(userId: number): Promise<DogsWeeklyWalkOverviewResponse[]> {\n        const ownDogIds = await this.usersService.getOwnDogsList(userId);\n\n        const ownDogInfos = await this.dogsService.find({\n            where: { id: In(ownDogIds) },\n            select: ['id', 'name', 'profilePhotoUrl', 'breed', 'todayWalkTime', 'walkDay'],\n            relations: {\n                walkDay: true,\n                todayWalkTime: true,\n            },\n        });\n\n        return await Promise.all(\n            ownDogInfos.map(async (ownDogInfo) => ({\n                ...makeSubObject(ownDogInfo, ['id', 'name', 'profilePhotoUrl']),\n                recommendedWalkAmount: ownDogInfo.breed.recommendedWalkAmount,\n                todayWalkAmount: await this.todayWalkTimeService.updateIfStaleAndGetDuration(ownDogInfo.todayWalkTime),\n                weeklyWalks: await this.dogWalkDayService.updateIfStaleAndGetWeeklyWalks(ownDogInfo.walkDay),\n            })),\n        );\n    }\n}\n"],"names":["StatisticsService","getDogMonthlyWalkingTotal","userId","dogId","period","startDate","endDate","getOneMonthAgo","Date","BadRequestException","journalsService","findJournalsAndGetTotal","getDogDailyWalkCountsByPeriod","date","getStartAndEndOfMonth","getStartAndEndOfWeek","findJournalsAndAggregateByDay","getDogsWeeklyWalkingOverview","ownDogIds","usersService","getOwnDogsList","ownDogInfos","dogsService","find","where","id","In","select","relations","walkDay","todayWalkTime","Promise","all","map","ownDogInfo","makeSubObject","recommendedWalkAmount","breed","todayWalkAmount","todayWalkTimeService","updateIfStaleAndGetDuration","weeklyWalks","dogWalkDayService","updateIfStaleAndGetWeeklyWalks","constructor","logger","Injectable"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";+BAkBaA;;;eAAAA;;;wBAlBmC;yBAC7B;sCAMkB;mCACH;6BACN;iCACI;sCACK;8BACR;0BAE+C;gCAC9C;;;;;;;;;;AAGvB,IAAA,AAAMA,oBAAN,MAAMA;IAUT,MAAMC,0BAA0BC,MAAc,EAAEC,KAAa,EAAEC,MAAc,EAAoC;QAC7G,IAAIC,WAAiBC;QAErB,IAAIF,WAAW,SAAS;YACnB,CAAA,EAAEC,SAAS,EAAEC,OAAO,EAAE,GAAGC,IAAAA,wBAAc,EAAC,IAAIC,OAAM;QACvD,OAAO;YACH,MAAM,IAAIC,2BAAmB,CAAC,CAAC,gBAAgB,EAAEL,OAAO,CAAC;QAC7D;QAEA,OAAO,IAAI,CAACM,eAAe,CAACC,uBAAuB,CAACT,QAAQC,OAAOE,WAAWC;IAClF;IAEA,MAAMM,8BACFV,MAAc,EACdC,KAAa,EACbU,IAAY,EACZT,MAAc,EACqB;QACnC,IAAIC,WAAiBC;QAErB,IAAIF,WAAW,SAAS;YACnB,CAAA,EAAEC,SAAS,EAAEC,OAAO,EAAE,GAAGQ,IAAAA,+BAAqB,EAAC,IAAIN,KAAKK,MAAK;QAClE,OAAO,IAAIT,WAAW,QAAQ;YACzB,CAAA,EAAEC,SAAS,EAAEC,OAAO,EAAE,GAAGS,IAAAA,8BAAoB,EAAC,IAAIP,KAAKK,MAAK;QACjE,OAAO;YACH,MAAM,IAAIJ,2BAAmB,CAAC,CAAC,gBAAgB,EAAEL,OAAO,CAAC;QAC7D;QAEA,OAAO,IAAI,CAACM,eAAe,CAACM,6BAA6B,CAACd,QAAQC,OAAOE,WAAWC;IACxF;IAEA,MAAMW,6BAA6Bf,MAAc,EAA6C;QAC1F,MAAMgB,YAAY,MAAM,IAAI,CAACC,YAAY,CAACC,cAAc,CAAClB;QAEzD,MAAMmB,cAAc,MAAM,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC;YAC5CC,OAAO;gBAAEC,IAAIC,IAAAA,WAAE,EAACR;YAAW;YAC3BS,QAAQ;gBAAC;gBAAM;gBAAQ;gBAAmB;gBAAS;gBAAiB;aAAU;YAC9EC,WAAW;gBACPC,SAAS;gBACTC,eAAe;YACnB;QACJ;QAEA,OAAO,MAAMC,QAAQC,GAAG,CACpBX,YAAYY,GAAG,CAAC,OAAOC,aAAgB,CAAA;gBACnC,GAAGC,IAAAA,6BAAa,EAACD,YAAY;oBAAC;oBAAM;oBAAQ;iBAAkB,CAAC;gBAC/DE,uBAAuBF,WAAWG,KAAK,CAACD,qBAAqB;gBAC7DE,iBAAiB,MAAM,IAAI,CAACC,oBAAoB,CAACC,2BAA2B,CAACN,WAAWJ,aAAa;gBACrGW,aAAa,MAAM,IAAI,CAACC,iBAAiB,CAACC,8BAA8B,CAACT,WAAWL,OAAO;YAC/F,CAAA;IAER;IA5DAe,YACI,AAAiBzB,YAA0B,EAC3C,AAAiBG,WAAwB,EACzC,AAAiBoB,iBAAoC,EACrD,AAAiBH,oBAA0C,EAC3D,AAAiB7B,eAAgC,EACjD,AAAiBmC,MAA4B,CAC/C;aANmB1B,eAAAA;aACAG,cAAAA;aACAoB,oBAAAA;aACAH,uBAAAA;aACA7B,kBAAAA;aACAmC,SAAAA;IAClB;AAsDP;AA9Da7C;IADZ8C,IAAAA,kBAAU;;;eAG4B,0BAAY,4BAAZ,0BAAY;eACb,wBAAW,4BAAX,wBAAW;eACL,oCAAiB,4BAAjB,oCAAiB;eACd,0CAAoB,4BAApB,0CAAoB;eACzB,gCAAe,4BAAf,gCAAe;eACxB,0CAAoB,4BAApB,0CAAoB;;GAPxC9C"}