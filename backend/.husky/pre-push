#!/bin/sh

NC='\033[0m'
GREEN='\033[0;32m'
RED='\033[0;31m'

# Get the git root directory
git_root=$(git rev-parse --show-toplevel)
backend_dir="$git_root/backend"

check_and_start_mysql_container() {
	local_mysql_container_exists=$(docker ps -aq -f name=local-mysql)	# Get local-mysql container ID
	local_mysql_container_running=$(docker ps -q -f name=local-mysql)	# Get running local-mysql container ID

    if [ "$local_mysql_container_exists" ]; then
		if [ "$local_mysql_container_running" ]; then
            echo -e "${GREEN}[INFO]${NC} 'local-mysql' container가 실행 중입니다."
		else
            echo -e "${GREEN}[INFO]${NC} 'local-mysql' container를 시작합니다..."
            docker start local-mysql
		fi
	else
		if [ -f .env.test ]; then
            export $(cat .env.test | xargs)
        else
            echo -e "${RED}[ERROR]${NC} '.env.test' 파일이 존재하지 않습니다."
            exit 1
		fi

		echo -e "${GREEN}[INFO]${NC} 'local-mysql' container를 생성하고 시작합니다..."
		docker run -d --name local-mysql --platform linux/amd64 -p $MYSQL_PORT:3306 \
		-e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -e MYSQL_DATABASE=$MYSQL_DATABASE mysql:8.4.0 \
		--character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
	fi
}

run_tests() {
    local module=$1
    cd "$backend_dir/$module"

    check_and_start_mysql_container $module

    echo -e "${GREEN}[INFO]${NC} $module Unit test 시작..."
    if ! npm run test; then
        echo -e "${RED}[ERROR]${NC} $module Unit test를 통과하지 못했습니다."
        exit 1
    fi

    echo -e "${GREEN}[INFO]${NC} $module E2E test 시작..."
    if ! npm run test:e2e; then
        echo -e "${RED}[ERROR]${NC} $module E2E test를 통과하지 못했습니다."
        exit 1
    fi

    echo -e "${GREEN}[INFO]${NC} $module 모든 test를 통과했습니다."
    cd "$backend_dir"
}

# Check if docker is running
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}[ERROR]${NC} Docker deamon이 실행 중이 아닙니다. Docker를 실행하고 다시 시도해주세요."
    exit 1
fi

cd backend && check_and_start_mysql_container

# Get the range of commits being pushed
if [ -z "$1" ]; then
    # If pushing current branch
    range="origin/$(git rev-parse --abbrev-ref HEAD)@{push}"
else
    # If pushing to a specific remote and branch
    range="$1"
fi

# Get list of changed files in the backend directory
changed_files=$(git diff --name-only origin/$(git rev-parse --abbrev-ref HEAD) HEAD -- "$backend_dir")

# Check if there are changes in the weather-api-module directory
if echo "$changed_files" | grep -q "^backend/weather-api-module/"; then
    echo -e "${GREEN}[INFO]${NC} weather-api-module 폴더에서 변경 사항 감지. weather-api-module 테스트를 실행합니다."
    run_tests "weather-api-module"
fi

# Check if there are changes in the server directory
if echo "$changed_files" | grep -q "^backend/server/"; then
    echo -e "${GREEN}[INFO]${NC} server 폴더에서 변경 사항 감지. server 모듈 테스트를 실행합니다."
    run_tests "server"
fi


echo -e "${GREEN}[INFO]${NC} 모든 필요한 테스트를 통과했습니다."
exit 0